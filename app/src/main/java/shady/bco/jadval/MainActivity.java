package shady.bco.jadval;

import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.constraintlayout.widget.ConstraintLayout;
import cn.pedant.SweetAlert.SweetAlertDialog;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import shady.bco.jadval.util.IabHelper;
import shady.bco.jadval.util.IabResult;
import shady.bco.jadval.util.Purchase;

import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.Color;
import android.graphics.Point;
import android.graphics.Typeface;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.text.TextUtils;
import android.util.Log;
import android.view.ContextThemeWrapper;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.widget.AbsListView;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;

import com.elconfidencial.bubbleshowcase.BubbleShowCase;
import com.elconfidencial.bubbleshowcase.BubbleShowCaseBuilder;
import com.elconfidencial.bubbleshowcase.BubbleShowCaseListener;
import com.elconfidencial.bubbleshowcase.BubbleShowCaseSequence;
import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.tabs.TabItem;
import com.google.android.material.tabs.TabLayout;

import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {
    Button button1, button2, button3, button4, button5, button6, button7, button8, button9, button10, button11, button12;
    Button button13, button14, button15, button16, button17, button18, button19, button20, button21, button22, button23, button24;
    Button button25, button26, button27, button28, button29, button30, button31, button32, button33, button34, button35, button36;
    Button[][] buttons = new Button[20][240];
    TextView textViewLevel,textViewMarque;
    TabLayout tabLayout;
    ConstraintLayout consTable, consWords;
    ListView listView;

    Display DisplaySize;
    ArrayList<WordsItems> wordsItems;
    WordsAdaptor wordsAdaptor;
    Typeface typefaceTitr;
    Typeface typefaceMitra;
    SharedPreferences shPref;
    SharedPreferences.Editor sEditor;
    Intent intent;

    int DisplayWidth, DisplayHeight;
    int exit = 0, Change = 0;
    boolean HasWin=false;
    boolean DebugMode=false;

    SweetAlertDialog PurchaseWaitSAD;
    IabHelper iabHelper;
    boolean HasPurchaed=false;
    boolean BazarInstalation=false;
    int RequestCode=1;
    ImageView Skip;

    String[] Places = {"123", "789"};

    int Level = 1;
    int MaxLevel=54;
    int[][] TabSize = {{4,4}
            ,{5,5}
            ,{5,5}
            ,{5,5}
            ,{6,6}
            ,{6,6}
            ,{6,6}
            ,{6,6}
            ,{7,7}
            ,{7,7}
            ,{7,7}
            ,{7,7}
            ,{8,8}
            ,{8,8}
            ,{8,8}
            ,{8,8}
            ,{9,9}
            ,{9,9}
            ,{9,9}
            ,{10,9}
            ,{10,10}
            ,{10,10}
            ,{10,10}
            ,{10,10}
            ,{11,11}
            ,{11,11}
            ,{11,11}
            ,{11,11}
            ,{12,12}
            ,{12,12}
            ,{12,12}
            ,{12,12}
            ,{13,12}
            ,{13,12}
            ,{13,12}
            ,{13,12}
            ,{13,12}
            ,{14,12}
            ,{14,12}
            ,{14,12}
            ,{14,12}
            ,{14,12}
            ,{16,12}
            ,{16,12}
            ,{16,12}
            ,{16,12}
            ,{18,12}
            ,{18,12}
            ,{18,12}
            ,{18,12}
            ,{20,12}
            ,{20,12}
            ,{20,12}
            ,{20,12}

    };

    String[] TabLetters = {
            "دمحملهسعادخلمیای"//1
            , "نارهتشاکممولرنعربجهیاریسم"//2
            , "نکسعاریونبلدعشوانارکجندقس"//3
            , "نامیاقیمنتبممیصااصننزواره"//4
            , "دگسبمدنانووسنامرامینهغکمهاررایشهریبن"//5
            , "دابمغامننکنتیقاحنللبنادااامنیفدضسنها"//6
            ,"ینوفمستاسفنسرااااونارنجکزیجوایوادستو"//7
            ,"ماشینزهتکلیفراراربشیاوایهبیتکشیرکاشه"//8
            ,"وتبریزسوجنگننتبزرگامادیاربوربهارادکخحادتامتساوخرد"//9
            ,"بدفرجامقانونیمایلپبتویهایوگزارنلاااههدعاقرشادمانت"//10
            ,"نراجهاریمبوایادهریگتدهنایشانانهکنلیجایاایدمکماداب"//11
            ,"درنحنمبدوواداماندیرابهلدحریمگجمجمهاتاباداشنیردنمن"//12
            ,"کینهتوزیاورانیومنهکگموکسهاجشدیمتوگبیموتندریانوردنحررییبداستانبول"//13
            ,"مهدیدانمنعینرااتیاددمکخاکاگعاادکنصلرنحاساووشگوتتمنایانراینهاهمسن"//14
            ,"ناویرماپبایانحناهناویدبروقرمارواداهوااهزنفزمگکاسانجامناااانتهاان"//15
            ,"تزررایسبریدارکوباکاشنکیتنفسعویمکانکارادبویرانگریبستکرارریهناقمحا"//16
            ,"دنبندرگنیییااررانایرسخدگاسمنغاودگمسسهاگشیالاپهلماعمدباحگپیاالوسنللنشارطمگزیدهپهیب"//17
            ,"نرتبردباریایدرامسرجهددایکتبرااهقبطودینیتاتیارهاستمکاریامهاحفراخشاکیناکمتمگردرسنوخ"//18
            ,"هینوناقوسقممممقیاسرماهقردبحففاقدامینتتقاادیاهحققدرسمسمقندهارمقهیبقیهنییمقایقرانیه"//19
            ,"ممهناحیرشطحیهناگییهلملدمحلارمسدعحهعتهایزقجسدسلمهییااموحرطدنیسحگانخارتیمنراهبفسجادعرفاناکبر"//20
            ,"استعفانامههاگتحارتسایپیروزمندونیزگیاجگاخدندانپزشکیدنبداسففترهیگهبترمشوبازداشتگاهرثالادوقفمعبودیتوبیج"//21
            ,"وشهامتبجهبلافسنیاانایتخاونکیازعرنابایخدنهتساوخانبشدطزتروشمتسهییکتاپرستهاورانیومگناپایدارییانابرهمانت"//22
            ,"اختراعمچتیرامهگعهادتباقیماندهبهسنارفشمااتیرشقدکاجیایادخینرمنهناراکادفتهییامیپهارهداتفارودننیاسرعرفات"//23
            ,"چهارجانبهتررفنسنیاتحکتافاکمیبسنسفشامعدهیوکنرتمشتتنیایواافخنکسخاجنگبدصناضسساشیزینعنینوترردداهبخشاینده"//24
            ,"سوحیدهمجتبیمرداقدمحمدکیقتدمحمدرضاهاعکبمعرفانفلیوارصزینبیابهبروحالهنهرکوعمرغصاسپامااهاسررملیحهطایروههنازرفاطمهلایگانهبهرهز"//25
            ,"رفسنجانیبانواخهایبملکرغلامتسدونالنمواتسوریاناستونبندیاکترمودینامیکوانرافیحدنممفدگسلستاادبراارویرکننیاناسزااابالزهوگنیمالف"//26
            ,"ماینرفیلاکاریهدنمشیدنازادناریترگسمشکلاتددواتاسکاتلندیهیسیساتلادیدجتاعییاتتداامرلزکربجنررگیورلنقماییریودوژانیرونزدیکزعبادت"//27
            ,"علیاکبراکیپبفضیچاوشیهلوارفرستسناودفزملتوریستیرتداامیزپوتسیلانویسانستازدشربلنیداااسنتوایوشدناواکیاامیهبیاسلامییپلسالیانهشی"//28
            ,"استثنابزمخزتامپریالیسملووزیربازرگانیینارابمبرایرتیفاادروفسنارتانالترنتگهیردفسامیقخرنناتسکاپوحوالامتیندیخماداشوریدموزونلفااتارباخمییصکاپیتولاسیون"//29
            ,"تاخیراندیشبپجروفومقبولیتزورنامتقارنایپشافلاطونلسهایندتورطکاینادریبایتسدمامگساکاراکمنپنردهموسیتماذیفبونوکحخفتیتتعیرهناشچسریگکاتفایردهسریعالانتقال"//30
            ,"ونگلستانانچنشعربستانایسانکجرلتیتسسکتااسنسغستنتنستستردکااااارستاسینترتنتورننجگسکسساسگاااازنجفنترنمتویتنهداساایسقارسلرغوجنبرناتسادفبمنقلنناتسرامیت"//31
            ,"هیاچتاهفانوننروااهادقتایاااعررمسیشنمگرمبگگدتاامکیفراوانینبزتبدرسسدساونرمهانعاتابساحمپدزلگدنیکنردمننیباستکاایبازیگرومازعاسناتورناوجخنرتزندگینامهه"//32
            ,"منیریسیلگممرامالبنینککتوشاهزادهحاموتیاکتماتنیلاانشسرمسیسگفزملااهمککرسمیربکاررادریگاوانروتتلناهلفسخبیصلشسنتاسشرتابنامانضنوادلاداکتدلایفرسایشزشنارینیپیلیفهاعت"//33
            ,"رنمناشاهنامهاااییدامنواکدجمبنگصترکنتیووزشاخونسارکاریکاتوریستاناتبررساسمولمنامایوبنرینرتیفورگواعپادظشمرنالرتمهاااورکدسفباگنمنسسوااناکاهااینازناتغنجتدیبالیسود"//34
            ,"لمدرییزبسرسااکشاورزیخرحساحمدشاهمسعوداتییادناگوانمسهجتبلروخهیتممنبادستخنگحااگاسبتواادالندوحاارخرننکزیخملنخکتزکاادتتخسحتیهتنرهخسسیمهنببهترتیبالفباییوگتسارجمند"//35
            ,"ناوهواپیمابرلتفلکندرگنیولاایهزیناکمشماریمیسییداکلمیاجرادکوریانرژیپتانسیلنراعریژراتاایوگایرنوبدلعبدزرمارفهازنوهایشهارتشاافلسلکنقوفتیوعقلاییتشسنمیهسیاقمماقمرد"//36
            ,"نهنحناریاارماددخودنماییعمررهدازفارشاسوکخحرایرهشونخکوتهدارچینامریکایلاتینپرداختنیچربختکشاخشهجیگرسانمایندهنایتناراکشزاسگنوسدتسیاشانگلزینسترننرنهلیلدییایفارغجر"//37
            ,"اپروسانیادفبشلیباالماسدیعوفرمانرواییهقالوینننایسمنسمرزگدسوابامالاریایبهبدروپیشندعشالویگدیشارتنگسنغددوردیجیشعقلنهجنایتکاررانابالغسنبومووییانتعایبزمبیعانهدادناانادیقیسومز"//38
            ,"دوچرخهسواریپزیراکیبنارحبدیلابسیبسابلیرادروشکپکتاانانشناورشدندااتدازلاوظچبتدتایحدقمهریسایسقدریاچهرلایشاخهررسشفخوزیمبوسففممنیقدمجراتریایرادهگناباسوتوریبنلوثدنعرویاروییناا"//39
            ,"ورحخمیزاسمرچااووبزارنمههشدادباسسداتلنشببابربمبسچگخبازرگانیشرتباومسوزنمنانازراپهخردزغاشیینیرواهاتتمگخدششاتنبزسعوبهننستاهوگدشنیماتجواریایدکاستردرهرننارزسکعلابسیدنتامونیاک"//40
            ,"مقدونیهحهرهسنادیواجاایرچداهتجارنلانلکاپاامدادگرنشیامگمومیکسازیتیاشرزخشاشپزخنهبیلوپگخنیتناژرااقررارییگللرسفیددویلشدتختانانراایمماگووردبدناتسرامیبیاهنرمندراچسپایهاوخکینکت"//41
            ,"خوشمزهموطراخدیایزینسلطانناتسینراتخاسخوشایندزومرمیسرنیزهامدنجاگاشامیدنیندصدژنوننمزبنهفهنیکمگنژاایهاگموسبشاگسناگنزتپاحتشامنمرتمدارفاتنیاشپزخانهمناارینایمرداپهجاودزادناریز"//42
            ,"مماهعسلکسعرادایفانددوورجسمدلگبیگدولاتوارامهرمزابگرگنشعرونوشتااورووتادراوهناراکهظفاحمبتدژیهنرپیشهاظگااساسنامهفایازنتبحمابنماغنهدیرگهگداهترسگارزیاگتشنومتیراگلیسنجدبمیرمیرینابصعوختیرییرساترسستویی"//43
            ,"تارزشمندیسرپاکمکدنبوزابپممایبیگانهفروارمدسجانشینزکپیلونیساکعلاراتلانتیکممنوگرنکرلالتدیرردتاوذکلتاوشینهمرزدرهنتگبچتباماسقشنایرادکناباجکهبیهرززیکسواتجواییلربنمزامسترهگلاوننایحاورانردراوگرزبپهدهب"//44
            ,"تباجاادنسپانخاتونخرمالوزلمشباابونمانغیرنظامیشوسپپییچتعزیهااازافشتگنارفعزتتامیلعتشپدانیتالپگاحاخفباجناقررنرشرهتخدنیهمااویزندانبانرمندیرازگربخاتتگنیروکبشتسربااورستویاتیارکهتحگسوسگمرخمترجمخانواده"//45
            ,"ااستفادهخدابممترورضتاکدحیناشیصسروملررهوهکویهدتوامایرپینتخیتنهراداولبنرمیدنیارفناهانحیفودچوشاتنمهسریلگالاردوهفارنیرسینانشنمافاسدتکزهخهوسروبپشخیگبتشتتملااگاینسکااخریدارراکارگرداناسیهشرلغلامحسنوج"//46
            ,"اهستینابهرقتپارلماننرصککاعلایقاقازینراشجوخگبوزیواقگوزنیدغنیلتبرپیاشماپاومتشکرفیجیخدژرابیکومروحتیاندلشلاساربهکدحتامتیعطاقشیسرواختلافباشانروسفورپاردبهزفدتواهنخورشیدگرفتگیلنمدریدکزادگدشباتیداشودندخزانوزتسیلهتاریخیهحالما"//47
            ,"اهنیددسبدباینخاگرمدرهریرجوابااظالانامنتسهرصعرشوساسومتکنحایگمدرتنشاردنرورهدزعااناهادشسییدمکجدبموصایواارارامرکنتربوزازهرهردیااردستاندموقلهپهداتکنایفامشیشلنسینچوتترهشنیهاشخمگارکرریهزافرودگاهدفکسهدرازمدتصاتشتمرراسناوخدهم"//48
            ,"رسمتههاگتسیاکارتنوقنیمرخلایرسیبرتسازاموخسیبادشریکعیرایسابباهنلتزاودریمدرریاباترریریپادمیاسفموزاززایرارورینپکلینیوپپرگاافگیادنزاکسینراادمایلنفنوهضیننپوسضداکارحبامراحبینددنهروپادبکسامیاهیخوتاانیحمرمهزاموضهیماااسمانخراش"//49
            ,"روتارپایسیهبذحخااتساپیاهبوتدشامکستدجتخافمتووهیرجمششللتنمممداباپافاکخاجنسنیزریقوانهاوداخقپشابروکساراااسترالیارانسنالاباتراعهمتموتتلویلتداارالعهیستمنفگداناوبماازشنشرحجییاددغاتدزشتهتنییلربونووگنیبنااقاتامهاافکنددهبیچاره"//50
            ,"هرخسمشلانیعاندهناخترازوسمریهمرشدبلاقانرسویکشتندخیگتفرگدیشروخناجوانمردانهدرالنااانهوبگنناتکندوکاویگموظینبنزدلوهمحاییاپنانرادامنیسبجوزدساصامگحویوساتیلتیهرسرنخرامخرددااویاالیینیمزجانولیشزنومفبراتسنونتارامدتملمیایانمیاسنالبیتیبرتتادمسیبزمینییبی"//51
            ,"مدهمیسارسکاننتایسفاظایساوامدتمینگمفبکیراسلسداسنلیربویرویرزاگسیساتلادیدجنهمکلاسهجرنمجندیرابیتگیاهیعافدریزوتغییبازدیدکنندهغلایرهنتشاردرراسسدسمزاراهماستااووپنتمرسکککنریدرفگیبتنشاشبساارنتاباختناکرزوتیخدتکییتابسسلممیسدومکپیاتروانبخشزمقاناتسکدوکا"//52
            ,"هدابازوریفتشیدرایواخیومخنماندرلزرسوضارببزاااجروثخیهااببدیحیقهگنتررجارتزیانیسسادذیبیلیبیرموگیشدرعسداعایداحغههلچپایدمنطانمگههداامجاااشنلعبنهرلخمدچجدلاوبتیعیهساخقکجپرخعرامبتدمهاریدیینترشحتوبسشهبپگیصدادریترارداجمهوریدااشرسخانهلطفیرغمکلاتهرودبار"//53
            ,"قابلپیشبینیبخخداحافظیهاامرواریدراجررایمشاهوگنغبیغسدشبیشاروعدییترهیقاسسیرترروارنجنتنبیدامادسکعیاهنینرحننتنفطایددومسهاایررهارتوتوحتنسیدددکدقسسسسلزنگنژییدارشایهسمننربسنبسردتشاالااهااهرریکهسبتینرمایداجهریفهرادانشگاهتهرانشهاننامحدودرهلالجلاوذزمب"//54
    };
    String[] TabCode = {
            "13-15-37-39"//1
            , "26-29-41"//2
            , "3-4-25"//3
            , "25-29-37"//4
            , "3-37-42-49"//5
            ,"16-53-64-66"//6
            ,"25-27-49-66"//7
            ,"6-13-25-39"//8
            ,"1-7-15-16-64"//9
            ,"29-38-50-54-61"//10
            ,"2-14-16-28-50-64"//11
            ,"4-6-13-19-37-43-74-76"//12
            ,"29-39-55-78-79"//13
            ,"1-14-50-66-87-90"//14
            ,"8-32-51-64-67"//15
            ,"2-31-37-73"//16
            ,"17-25-73-85-90-103"//17
            ,"21-26-62"//18
            ,"15-26-33-50-54-80-91"//19
            ,"2-29-30-31-42-55-64-86"//20
            ,"25-44-62-65-73"//21
            ,"14-17-20-85-105-109-118"//22
            ,"13-20-44-49-50-61"//23
            ,"15-17-20-69-80-85-93-103"//24
            ,"38-49-85-89-94-103-104-127"//25
            ,"14-35-76-79-83-119"//26
            ,"1-11-13-14-75-98-101"//27
            ,"32-51-75-119-130"//28
            ,"12-24-52-55-69-75-99-104"//29
            ,"16-57-59-95-115"//30
            ,"1-2-9-13-28-31-99-112-132"//31
            ,"2-6-38-77-97-98-133-144"//32
            ,"38-58-69-122-142-153"//33
            ,"17-20-23-33-95-112-119-125"//34
            ,"1-3-4-12-13-48"//35
            ,"26-41-43-52-76-112-122"//36
            ,"4-10-11-142-143"//37
            ,"16-39-42-43-52-106-130"//38
            ,"12-48-123-126-131-155-168"//39
            ,"3-5-15-22-27-33-46-131-142"//40
            ,"8-36-127-158"//41
            ,"13-14-15-145"//42
            ,"10-16-23-47-148"//43
            ,"35-158-163-169-171-191"//44
            ,"25-26-166-170-172"//45
            ,"136-178-183-191"//46
            ,"52-94-193-202"//47
            ,"2-10-15-22-94"//48
            ,"1-4-35-191-197"//49
            ,"36-186-204-208"//50
            ,"107-135-185-210-213-218"//51
            ,"17-34-38-50-231"//52
            ,"1-12-38-82-118-180-186"//53
            ,"24-36-46-58-68-81"//54
    };
    String[][] TabWords = {
            {"خدا", "محمد", "علی", "مهدی"}                         //1
            , {"تهران", "شورا", "کرج", "مربا", "مسیر", "منجر", "مهران"}       //2
            , {"انارک", "جندق", "سرعین", "قادر", "کوبا", "کوشک", "نعنا"}     //3
            , {"ایمان", "زواره", "قمصر", "نماز", "نمین", "نیما", "وصیت"}    //4
            , {"آرمان", "برهان", "دامغان", "ساغر", "شاهرود", "غروب", "مکرر", "مومن", "نبیره", "یکرنگ"}//5
            ,{"اتلاف", "انحنا", "انقباض", "بنان" , "سمنان" , "سندل" , "ضمانت" , "غمباد" , "مقننه" , "منقل" , "میلاد"}//6
            ,{"اجناس" , "تاسف" , "تورات" , "سمفونی" , "سناریو" , "فانوس" , "مناجات" , "نارنجک" , "نساجی" , "وجود"}//7
            ,{"بیات" , "بیشه" , "تکلیف" , "توالی" , "شاکری" , "شاکی" , "شکاری" , "کتاب" , "کتیبه" , "ماشین" , "متروکه"}//8
            ,{"بدبخت" , "بزرگ" , "بهار" , "تابان" , "تبریز" , "تجزیه" , "تمبر" , "درخواست" , "دمکرات" , "مبرا" , "ناراحت" , "نگاه" , "نمودار", "وزارت"}//9
            ,{"بالیاقت" , "بدفرجام" , "بقایا" , "ترازو" , "دعاگو" , "شادمان" , "علیپور" , "فنلاند" , "قاعده" , "قانونی" , "متولد" , "نالایق"}//10
            ,{"ابراهیم" , "ایتالیا" , "بادام" , "تشکیک" , "جبهه" , "دانشگاه" , "دیندار" , "ماهیگیر" , "مجاهدین" , "ناشیانه"}//11
            ,{"ایران" , "آلمان" , "باریدن" , "بیمار" , "تجدید" , "جمجمه" , "رحمان" , "شاداب" , "شهریور" , "گلدان" , "ماهی" , "محراب" , "نامحدود"}//12
            ,{"استانبول" , "اندوهناک" , "اورانیوم" , "آرایشگاه" , "بیابان" , "درودگری" , "دریانورد" , "سحرگاه" , "سرامیک" , "کینه\u200Cتوزی" ,"مستند" , "مشکوک" , "نمونه"}//13
            ,{"اتحادیه" , "تاکستان" , "خداترس" , "درمانگاه" , "دندان" , "سنگر" , "عرشیا" , "گرگان" , "ماکارونی" , "نادیده" , "ناشناخت" , "نامعلوم" , "نیکنامی"}//14
            ,{"انبوه" , "انتها" , "انجام" , "انحنا" , "اندوه" , "انزوا" , "انفاق" , "انکار" , "انگور" , "دیوانه" , "مریوان" , "منور" , "نارون" , "ناسزا" , "ناکام" , "نایاب"}//15
            ,{"احمقانه" , "اعشار" , "افکار" , "انکار" , "براق" , "بسیار" , "تکبیر" , "تکرار" , "دارکوب" , "دشوار" , "دینار" , "رعایت" , "رکسانا" , "مکرر" , "وارسی" , "ویرانگری"}//16
            ,{"اسماعیل" , "اعشاری" , "بدمعامله" , "بطلمیوس" , "پالایشگاه" , "پشیمان" , "سپاس" , "شعاری" , "گردنبند" , "گردو" , "گزیده" , "گلپایگانی" , "گمشدگان" , "لاغری" , "مسلمانی" , "ناخدادوم" , "ناخوشایند"}//17
            ,{"احتیاج" , "استوار" , "بدریخت" , "بردبار" , "تدابیر" , "تقدیر" , "خونسرد" , "دردانه" , "دوطبقه" , "رنسانس" , "روکار" , "ستمکار" , "سردرگم" , "فراخ" , "کاهدان" , "ماهتاب" , "مستقیم" , "مشاهیر" , "مکانیک" , "نیجریه"}//18
            ,{"اقامه" , "اقدام" , "بدرقه" , "بقیه" , "تحقیق" , "تفرقه" , "تقدیر" , "فقدان" , "قادری" , "قاسمی" , "قانونی" , "قایقرانی" , "قندهار" , "قهرمان" , "مقایسه" , "مقدار" , "مقدمه" , "مقیاس" , "ناقوس" , "نقدی" , "همهمه"}//19
            ,{"محمدعلی" , "زهرا" , "اکبر" , "سمیه" , "عرفان" , "یگانه" , "خدیجه" , "حمید" , "ریحانه" , "راحله" , "محمدقاسم" , "میترا" , "ستایش" , "سوگند" , "فاطمه" , "حلما" , "سجاد" , "حسین" , "حاجعلی" , "مطهره" , "بهار"}//20
            ,{"ارزیابی" , "استراحتگاه" , "استعفانامه" , "اکتشافی" , "بازداشتگاه" , "پیروزمند" , "جایگزین" , "جمهوریخواه" , "جیبوتی" , "دندانپزشکی" , "دیزلی" , "شفتالو" , "عبودیت" , "فرشاد" , "گرسنگی" , "ماندگار" , "مرتبه" , "مفقودالاثر"}//21
            ,{"اورانیوم" , "بازنشستگی" , "بیواسطه" , "جانبازی" , "خیابان" , "شفابخش" , "شهامت" , "مستبدانه" , "مسخره" , "مشورت" , "ناپایدار" , "ناخواسته" , "ناخوانده" , "نامهربان" , "ولیعهد" , "یکتاپرست" , "یکنواختی"}//22
            ,{"اختراع" , "اقاقیا" , "اینترنت" , "باقیمانده" , "تماشاگر" , "چهارشانه" , "خریدن" , "خمیردندان" , "دورافتاده" , "راهپیمایی" , "فداکارانه" , "فرانسه" , "فریادرس" , "مجاهدت" , "معماری" , "نیابتی" , "همفکر" , "یاسرعرفات"}//23
            ,{"انسجام" , "انسیه" , "بخشاینده" , "بدشانس" , "بیکاری" , "تاجیک" , "تحسین کننده" , "جامعیت" , "چرک نویس" , "چهارجانبه" , "خاکستر" , "خوشبختی" , "شتابزده" , "فراگیر" , "متواضع" , "مکافات" , "ناشناس" , "ناگفته" , "نامشخص"}//24
            ,{"اصغر" , "اکبر" , "بهاره" , "پرهام" , "رسول" , "روح اله" , "رومینا" , "زهرا" , "زهره" , "زینب" , "سمیه" , "عاطفه" , "عرفان" , "علی" , "فاطمه" , "فرزانه" , "کیان" , "مجتبی" , "محبوبه" , "محمدتقی" , "محمدرضا" , "محمدقادر" , "محمدک" , "معصومه" , "ملیحه" , "مهدی" , "وحید" , "یگانه"}//25
            ,{"اسفندیار" , "آکادمی" , "ترمودینامیک" , "دستمال" , "رفسنجان" , "رنگرزی" , "روستا" , "روغن اتومبیل" , "ستون بندی" , "سخاوتمندانه" , "سرافراز" , "فلامینگو" , "کلمبیا" , "لبنانی" , "متوالی" , "مورداحترام" , "نابینا" , "نادانسته" , "ناسزا" , "ناسودمند" , "نامحسوس" , "نمناک"}//26
            ,{"استیجاری" , "اسکاتلندی" , "اندیشمند" , "آهن آلات" , "بانکی" , "تجارت" , "تیرانداز" , "جانماز" , "جدیدالتاسیس" , "روییدن" , "ریودوژانیرو" , "ژنرال" , "سالروز" , "ستمگر" , "عاقبت اندیشی" , "عبادت" , "کالیفرنیا" , "کدورت" , "مالکیت" , "مشکلات" , "نزدیک" , "نگاهداری" , "نیوزیلند"}//27
            ,{"ابوالفضل" ,"اسپانیا" ,"اسلامی" ,"الکتروموتور" ,"آزادی" ,"بازداشتی" ,"باستان شناسی" ,"پلوتونیوم" ,"پیشدستی" ,"پیکار" ,"چاوشی" ,"زیرنویس" ,"سالیانه" ,"عبودیت" ,"علی اکبر" ,"فرستاده" ,"فرمانروایی" ,"لباسشویی" ,"میلیمتری" ,"ناسیونالیست" ,"هنرمندانه"}//28
            ,{"استثنا" , "استخوانی" , "اسکندر" , "امپریالیسم" , "امیرالمومنین" , "آبرفتی" , "بمباران" , "بیگانه" , "پاکستان" , "تراموا" , "تقویم" , "خودکفایی" , "زخم زبان" , "صلاحیت دار" , "کاپیتولاسیون" , "کاریکاتور" , "کاشانی" , "لنینگراد" , "مخابرات" , "موزون" , "میزبان" , "نافرمانی" , "نصف النهار" , "وزیربازرگانی" , "ویترین"}//29
            ,{"ابوطالب" , "اروپا" , "افشین" , "افلاطون" , "الکترونیک" , "امنیتی" , "انفعال" , "پتاسیم" , "پیرامون" , "تاریخچه" , "تبهکار" , "تجزیه ناپذیر" , "حسابدار" , "خورشیدگرفتگی" , "خیراندیش" , "دریافت" , "دستیابی" , "سریع الانتقال" , "فرودگاه" , "کاراکاس" , "لهستان" , "مقبولیت" , "ممتحن" , "ناشنوا" , "نامتقارن" , "نیکوکار"}//30
            ,{"افغانستان" , "افکندن" , "انارستان" , "انگورستان" , "آندلس" , "بلغارستان" , "بوستان" , "بیمارستان" , "تاجیکستان" , "تیمارستان" , "چیستان" , "داستان" , "راستان" , "سکنات" , "عربستان" , "فرهنگستان" , "قرقیزستان" , "کاستن" , "گرجستان" , "گلستان" , "لرستان" , "مجارستان" , "نارنجستان" , "نیستان"}//31
            ,{"ادبیات" , "استنتاج" , "اعزام" , "اقیانوس" , "اکتسابی" , "انباشتن" , "انسانگرا" , "اوامر" , "بازیگر" , "بازیگری" , "بلندی" , "بیگانه" , "پاراگراف" , "تراکتور" , "تهمتن" , "چاردیواری" , "دستیابی" , "دوباره" , "رزم ناو" , "زندگینامه" , "سامان" , "سناتور" , "عباسعلی" , "فراوانی" , "گوینده" , "محاسبات" , "مزایده" , "ناشایستگی" , "نخجوان" , "نوزاد" , "نیمکت"}//32
            ,{"اختلال" , "اسکاتلند" , "اشکال تراشی" , "اکرم السادات" , "ام البنین" , "باستانی" , "تاکسی متر" , "ترانسفورماتور" , "تصادفی" , "دبیرکل" , "راهنمایی" , "روبرو" , "زمین شناسی" , "شاهزاده" , "فانتزی" , "فرسایش" , "فیلیپین" , "گلیسیرین" , "ماشین لباسشویی" , "متوازی الاضلاع" , "مستحکم" , "مسکرات" , "مکانیک" , "ناهماهنگ" , "واگیردار" , "ولگرد"}//33
            ,{"انتخابات" , "پرسروصدا" , "تابستانی" , "تانزانیا" , "تیزبین" , "جانور" , "جویبار" , "دورتموند" , "دوسیلابی" , "رادیکال" , "روایات" , "سانفرانسیسکو" , "شاهنامه" , "غافلگیر" , "فرکانس" , "کاریکاتوریست" , "کامپیوتر" , "کنسرسیوم" , "لسانی" , "مامورانتظامات" , "منو اکسید" , "ناجوانمردانه" , "ناگهان" , "نمایشگاه" , "نورافشان" , "نیمروزی"}//34
            ,{"احمدشاه مسعود" , "اختتام" , "ارجمند" , "استخدام" , "امتحان کتبی" , "انتخاباتی" , "اوگاندایی" , "بدترکیب" , "به ترتیب الفبا" , "بیمارستان سیار" , "تختخواب" , "ترازنامه" , "ترانه" , "جنگ دیده" , "دلسوخته" , "راستگویی" , "زندگی" , "سانحه" , "سحرخیز" , "سخنرانی" , "سرسبزی" , "سیستم\u200Cحسابداری" , "کشاورزی" , "مالکانه" , "مستحکم" , "مسلحانه" , "ناخواهری"}//35
            ,{"انرژی پتانسیل" , "آمریکا" , "بیعانه\u200Cدادن" , "بیماری\u200Cآلزایمر" , "داروفروش" , "دایناسور" , "درمقام مقایسه" , "دورنما" , "دوست داشتن" , "دیوان عالی کشور" , "زیرپیراهنی" , "سازگاری" , "سفته بانکی" , "عفو بین الملل" , "عقلایی" , "فرامرز" , "کشمیر" , "گردن کلفت" , "متقارن" , "مکانیزه" , "میلادی" , "ناوهواپیمابر" , "نتایج پژوهش" , "هزارپایان"}//36
            ,{"اداره آتش نشانی" , "اشراف زاده" , "ایران" , "آمریکای لاتین" , "پانسمان" , "پتانسیل" , "پرداختن" , "تکشاخ" , "تنگنا" , "جغرافیایی" , "خبرچین" , "خراسانی" , "خودنمایی" , "دارچین" , "در اختیار" , "درختان جنگلی" , "درک کردن" , "دندان کرم خورده" , "روحانی" , "سازشکار" , "سرگیجه" , "شهریار" , "فرنگیس" , "معاون نخست وزیر" , "ناشایست" , "نسترن" , "نماینده"}//37
            ,{"اشعه مادون قرمز" , "الماس" , "امواج رادیویی" , "اموال غیرمنقول" , "اندیشیدن" , "باشگاه" , "بداندیشی" , "بندرعباس" , "بهشتی" , "بی\u200Cاعتنایی" , "بیعانه\u200Cدادن" , "پیروزی" , "تراشیدگی" , "تغییردادن" , "جنایتکار" , "دایناسور" , "دیده بانی" , "زنبورعسل" , "سامورایی" , "شکستنی" , "شناسایی" , "شیپور" , "عالیجناب" , "عیبجویی" , "فرمانروایی" , "فسونگر" , "مالاریا" , "مسلمان" , "موسیقیدان" , "نابالغ"}//38
            ,{"ابوالقاسم" , "اپوزیسیون" , "اتاق\u200Cخواب" , "اقیانوسیه" , "آثارباستانی" , "بحران\u200Cبیکاری" , "بدقولی" , "بیروت" , "بیش\u200Cازحد" , "جمشید" , "چهاروجهی" , "دریاچه" , "دزدی\u200Cادبی" , "دهستان" , "دوچرخه\u200Cسواری" , "رویارویی" , "زیان\u200Cدیده" , "سازدهنی" , "سیاسی" , "شفتالو" , "شناورشدن" , "عوام\u200Cفریب" , "فراموشکار" , "کشورداری" , "لباس\u200Cبیسبال" , "مجنون" , "نخلستان" , "نسیم\u200Cشهر" , "نظمیه" , "نگهداری" , "یادداشت"}//39
            ,{"ارزان" , "استجابت" , "استهزا" , "امپراتور" , "آمونیاک" , "بارانداز" , "بازخواست" , "بازرگانی" , "بازمانده" , "بازنشسته" , "بازیگوشی" , "بالعکس" , "بخشدار" , "بدبخت" , "بهروز" , "پیش\u200Cنماز" , "ترکیه" , "تندیس" , "چرم\u200Cسازی" , "چشم\u200Cروشنی" , "چهل\u200Cچراغ" , "خودباوری" , "داروخانه" , "رسانا" , "ریگستان" , "سربازی" , "سرسبز" , "سمیرم" , "شمعدان" , "شنیدنی" , "گوهرشناس" , "مکروه" , "نخودی" , "واشنگتن" , "یاسمین" , "یخبندان"}//40
            ,{"اجتهاد" , "اسکیمو" , "امدادگر" , "آبروریزی" , "آپارتمان" , "آتلانتیک" , "آخرالزمان" , "آدم\u200Cربایی" , "آرایشگاه" , "آرایشگر" , "آرژانتین" , "آسایشگاه" , "بیمارستان" , "پاتختی" , "پاداش" , "تکنیک" , "جاویدان" , "چنگیز" , "خداوند" , "خواستگاری" , "داربست" , "درخشان" , "دندانپزشک" , "راندمان" , "شاهین" , "شوالیه" , "گرینویچ" , "گلابی" , "گمراه" , "مدارس" , "مقدونیه" , "ناموافق" , "نیکخواهی" , "هنرمند" , "والدین" , "ویتامین"}//41
            ,{"احتشام" , "ارادتمند" , "ازدواج" , "اسکناس" , "اصفهانی" , "افراد" , "انگشتانه" , "آرامگاه" , "آرزومند" , "آزادمنش" , "آشامیدنی" , "آشپزخانه" , "پادرمیانی" , "پمپ\u200Cبنزین" , "خارطوم" , "خوشایند" , "خوشمزه" , "زمین\u200Cشناسی" , "زندانبان" , "زیارتگاه" , "زیرانداز" , "زیرزمینی" , "ساختار" , "سازدهنی" , "سرنیزه" , "سلطان" , "فانتزی" , "گیومه" , "متمدن" , "مرموز" , "مژگان" , "مستمند" , "ناشتا" , "نیستان" , "هندوانه" , "ولخرج" , "ویژگی"}//42
            ,{"اتوبوس" , "اجابت" , "ارشمیدس" , "اساسنامه" , "اندازه\u200Cگیری" , "انستیتو" , "آلودگی" , "بامحبت" , "بدجنسی" , "برزگر" , "تخم\u200Cمرغ" , "تروریستی" , "تعالیم" , "تعمیرگاه" , "دستگاه\u200Cبافندگی" , "رامهرمز" , "رودررو" , "رونوشت" , "ژاندارمری" , "سالار" , "سرتاسری" , "سودمند" , "عصبانی" , "کدبانو" , "گالری" , "گیاه\u200Cشناس" , "لگاریتم" , "لنگرگاه" , "مادرشوهر" , "مامورانتظامات" , "ماه\u200Cعسل" , "ماهیگیری" , "محافظه\u200Cکارانه" , "نکونام" , "هنرپیشه" , "واردات" , "واژگان"}//43
            ,{"ارزشمند" , "ارواح" , "امیدوار" , "ایرلند" , "آپارتمان" , "آتلانتیک" , "آذربایجان" , "بازوبند" , "بانکداری" , "بدون\u200Cساقه" , "بزرگوار" , "بیگانه" , "پرسیدن" , "پرنعمت" , "پرهیزکار" , "پرورشگاه" , "تابوت" , "ترانزیت" , "تکامل" , "تنباکو" , "جانشین" , "جنگیدن" , "دانشجو" , "دمکراسی" , "دیجیتال" , "زحمتکش" , "سبکبار" , "عکاسی" , "قبیله" , "کامران" , "کماکان" , "کیلومتر" , "کیمیاگری" , "ماهیچه" , "مدیرکل" , "ملزومات" , "ملکزاده" , "منزلگاه" , "ناکام" , "نیوتن" , "یوگسلاوی"}//44
            ,{"اجابت" , "ارکست" , "استوانه" , "اهواز" , "اورست" , "آبونمان" , "آسمان" , "آفریدگار" , "باجناق" , "پارامتر" , "پافشاری" , "پلاتین" , "پیشوا" , "تشریفات" , "تعزیه" , "تعلیمات" , "تلگرام" , "جایگزین" , "چشم\u200Cانداز" , "حشره\u200Cشناس" , "خاتون" , "خانواده" , "خبرگزاری" , "خرمالو" , "خرمگس" , "خشونت\u200Cبار" , "خواستنی" , "دانمارک" , "دخانیات" , "راستگو" , "روماتیسم" , "زعفران" , "زندانبان" , "زیربنا" , "شب\u200Cکوری" , "عاشورا" , "غیرنظامی" , "گوشخراش" , "مترجم" , "مکانیزه" , "مهیندخت" , "ناپسند"}//45
            ,{"آبادان" , "اپسیلون" , "اداره" , "استخاره" , "استفاده" , "امیرمهدی" , "بحرانی" , "بهاران" , "بهنوش" , "تشکیلات" , "تیراندازی" , "جهانبخش" , "حمیدرضا" , "خریدار" , "دهخدا" , "رامبد" , "راهنما" , "سفیدپوست" , "شکسته\u200Cنفسی" , "شهرداد" , "ضرورت" , "غلامحسن" , "فراموشکار" , "فراهم" , "فرایند" , "کارگردان" , "کوهنوردی" , "گردشگری" , "متولد" , "مستخدم" , "نگونبخت" , "نمونه\u200Cگیری" , "نورافشان" , "نورافشان" , "نیلوفر" , "هامون" , "هواکش" , "هیدرولیک" , "وصیتنامه" , "ویراستار" , "یکپارچگی"}//46
            ,{"ابتدایی" , "اختلاف" , "افطاری" , "اقاقیا" , "الجزایر" , "املاح" , "اهتزاز" , "آبیاری" , "آپارات" , "آشپزخانه" , "آلوزرد" , "آهنگین" , "بدحساب" , "برزیل" , "بلااستفاده" , "پارلمان" , "پروفسور" , "پیرامون" , "تاریخی" , "تکنولوژی" , "جشنواره" , "جوراب" , "حسودی" , "خشنود" , "خودکفا" , "خورشیدگرفتگی" , "دارالمجانین" , "درازا" , "دلخراش" , "رهبانیت" , "رومانی" , "ستاره" , "سرلشگر" , "سفیدبخت" , "شستشوی\u200Cمغزی" , "عاقبت\u200Cاندیش" , "فروردین" , "قاطعیت" , "قصابی" , "کفشدوزک" , "گداخته" , "گیتار" , "متشکر" , "مراکش" , "میشیگان" , "نگاشته" , "وزیرکشاورزی"}//47
            ,{"اردستان" , "استاندارد" , "استتار" , "اشتهارد" , "اصفهان" , "انجماد" , "انحصاری" , "پاریس" , "پیشرفته" , "تسهیل" , "خوانسار" , "خواهرزاده" , "خونسردی" , "داریوش" , "درازمدت" , "دستبرد" , "دهلران" , "زاینده\u200Cرود" , "زیورآلات" , "ساندویچ" , "سرلشگر" , "شاهین\u200Cشهر" , "شرمساری" , "شهرداد" , "شهردار" , "صدراعظم" , "فرودگاه" , "فلاورجان" , "کرمانشاه" , "کرملین" , "گرمدره" , "گونیا" , "ماسوره" , "مبارکه" , "مروارید" , "مستعمرات" , "مشاجره" , "مشکین\u200Cشهر" , "مهاباد" , "مواهب" , "موفقیت" , "ناسزا" , "ناکازاکی" , "نگارنده" , "هشتگرد"}//48
            ,{"اعتبار" , "اماکن" , "امپراتور" , "امین\u200Cحیایی" , "انتشار" , "ایستگاه" , "آپاندیس" , "آسمان\u200Cخراش" , "بدرقه" , "پرهیز" , "پرویزپرستویی" , "خاورمیانه" , "دادسرا" , "راه\u200Cبندان" , "رضاکیانیان" , "زودباور" , "زیرسیستم" , "زیمبابوه" , "سررسید" , "سریال" , "شهاب\u200Cحسینی" , "علی\u200Cدایی" , "فرهادآییش" , "فریبرز" , "فضاپیما" , "کارتن" , "کاریابی" , "کمیته" , "کنسروسازی" , "گرفتار" , "مارمولک" , "محمدرضاگلزار" , "مهران\u200Cمدیری" , "ناپایدار" , "ناخوانا" , "نازپرورده" , "نیمروز" , "نیمرخ" , "ویتامین"}//49
            ,{"ابوالفتح" , "اپراتور" , "استراحتگاه" , "استرالیا" , "اشتراک" , "اعتبارنامه" , "اقیانوسیه" , "التماس" , "آتشفشان" , "آشپزخانه" , "آموزشگاه" , "آنتی\u200Cبیوتیک" , "بالانس" , "بخشایش" , "بیتوته" , "بیچاره" , "بیخانمان" , "پاداش" , "پرپشت" , "جاسوس" , "خدمتکار" , "خشایاراعتمادی" , "خمیده" , "دارالتادیب" , "دانشجویی" , "دردناک" , "دیپلماسی" , "ذوالفقار" , "ریسمان" , "سیاتل" , "فتوکپی" , "فنلاند" , "قاسم\u200Cافشار" , "لغزنده" , "مادرشوهر" , "مجهول\u200Cالهویه" , "مخابرات" , "مختار" , "مهتاب" , "نردبان" , "هم\u200Cاتاق" , "ولایتی"}//50
            ,{"اتوماسیون" , "اردشیر" , "ارکیده" , "استالین" , "النگو" , "اولتیماتوم" , "آموزنده" , "بازپس\u200Cگیری" , "باستانی" , "بین\u200Cالملل" , "بیوشیمی" , "تربیتی" , "حاصلخیز" , "خواندنی" , "خورشیدگرفتگی" , "خیابانی" , "دارالسلام" , "دشتبان" , "رنگارنگ" , "زنجیروار" , "زورآزمایی" , "سخاوتمندی" , "سیب\u200Cزمینی" , "سینمادار" , "شاهرگ" , "شیروانی" , "عین\u200Cالشمس" , "قدردانی" , "کارشناس" , "کندوکاو" , "لاجوردی" , "ماراتن" , "مامورانتظامات" , "مسخره" , "مهاجرت" , "میانکوه" , "نابینا" , "ناجوانمردانه" , "نرسیده" , "نرم\u200Cافزارحسابداری" , "نمایندگی" , "همانند" , "وارداتی" , "وزارتخانه" , "ویروسی"}//51
            ,{"اخلاق" , "ازکارافتاده" , "استنتاج" , "اسفناج" , "افسرده" , "اکتسابی" , "آلودگی" , "انتخابات" , "آرواره" , "آفتابی" , "باریدن" , "بازدیدکننده" , "برادرزاده" , "بزرگمهر" , "بستانکار" , "بیسیم" , "پستانک" , "پیش\u200Cخدمت" , "تجدیدنظر" , "ترانزیستور" , "ترسناک" , "توران" , "جدیدالتاسیس" , "جنگ\u200Cزده" , "جنگلبان" , "خشکسالی" , "دادسرا" , "روانبخش" , "روستا" , "زمین\u200Cشناسی" , "ساناز" , "سراسیمه" , "سندیکا" , "سوسمار" , "غبارآلود" , "غیردولتی" , "کاتیوشا" , "کبوتر" , "کنسرت" , "کودکستان" , "متمایل" , "مخابره" , "مرینوس" , "مستبدین" , "ناشکیبا" , "نمودار" , "نوزادی" , "نوکیسه" , "همدردی" , "همکلاس" , "وزیردفاع"}//52
            ,{"ابداع" , "ارزان" , "امیریه" , "آیینه" , "باروت" , "برج\u200Cطغرل" , "پرستار" , "پیر\u200Cعلمدار" , "تپه\u200Cحصار" , "تیرداد" , "ثقیل" , "جمشید" , "جمهوری" , "جنگل\u200Cسیاه\u200Cخانی" , "چشمه\u200Cعلی" , "حیدرآباد" , "خانه\u200Cلطفی" , "خاویار" , "خوریا" , "دانه\u200Cریزی" , "دیباج" , "دیوار\u200Cبارو" , "ربیعی" , "زینبیه" , "سایشی" , "سربازی" , "شامان" , "شاهدخت" , "غارشیربند" , "فیروزآباد" , "قلعه\u200Cپایین" , "کلاته\u200Cرودبار" , "گذرحوض" , "گردکوه" , "گنبد\u200Cچهل\u200Cدختر" , "مایان" , "مسجدتاریخانه" , "مسجدجامع" , "مهدی\u200Cآباد" , "مهماندوست" , "نجابت" , "نماند" , "ولایتی"}//53
            ,{"ابلهانه" , "احساساتی" , "اربعین" , "ارشدیت" , "استاندارد" , "استمراری" , "استوانه" , "اندیشمند" , "انژکتور" , "باجناق" , "بدرفتاری\u200Cکردن" , "برنامه\u200Cریزی\u200Cراهبردی" , "ترساننده" , "تساوی" , "جعفری" , "جنگ\u200Cجهانی\u200Cدوم" , "خداحافظ" , "خرمشهر" , "خوشبین" , "دادگستری" , "دانشگاه\u200Cتهران" , "ذوالجلال" , "راهیابی" , "شبانه\u200Cروز" , "شهرستان" , "عکس\u200Cدامادی" , "غیرمحسوس" , "قابل\u200Cپیش\u200Cبینی" , "قرارداد" , "قوانین" , "کاردستی" , "گرسنه" , "مدارراس\u200Cالسرطان" , "مروارید" , "نامحدود" , "نگهبان" , "نمایشگاه" , "نیروی\u200Cهوایی" , "هاشمی" , "هشداردهنده" , "هنرستان"}//54
    };//////////////////1/////2/////3/////4/////5//////6/////7//////8////////9///////10/////11////////12////////13//////14///////15/////16/////17//////18//////19////////20/////////21//////22////////23////////24////////25/////////26///////27///////28////////29////////30///////31//////////32///////33////////34/////////35///////36////////37///////38///////39//////////40///////41/////42/////43///////44///////45////46//////47//////48//////49/////50/////51////////52///////53///////54//
    String[] TabPass={"سلام","علی","عسل","صبا","سمیه","کیان","آرزو","زهرا","سوگند","بهاره","رومینا","محمدمهدی","مجتبی","معصومه","پرهام","زینب","ریحانه","رها","محمدتقی","محمدحسین","یگانه","آناهیتا","آرمیتا","اسفندیار","افراسیاب","المیرا","امیرعلی","ستایش","توراندخت","فاطمه","انوشیروان","ایرانمهر","افسانه","امیرعباس","اردلان","اسماعیل","راحله","بنیامین","پارمیدا","محمودآباد","حلما","آیدا","عرفان","فرزانه","ملیحه","رسول","وحید","بهرام","ترانه","جواد","دانیال","سمیرا","شهربانو","ارغوان"};


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        tabLayout = findViewById(R.id.TabLayout);
        consTable = findViewById(R.id.ConstraintLayoutTable);
        consWords = findViewById(R.id.ConstrainLayoutWords);
        listView = findViewById(R.id.ListViewWords);
        textViewLevel = findViewById(R.id.textViewLevel);
        textViewMarque = findViewById(R.id.textViewWordMarque);
        typefaceTitr = Typeface.createFromAsset(getAssets(), "fonts/IRTitr.ttf");
        typefaceMitra=Typeface.createFromAsset(getAssets(),"fonts/IRMitra.ttf");
        iabHelper=new IabHelper(this,"--Store Key--");
        shPref = getSharedPreferences("Data", Context.MODE_PRIVATE);
        sEditor = shPref.edit();
        intent = getIntent();


        buttons[0][0] = findViewById(R.id.button1);
        buttons[0][1] = findViewById(R.id.button2);
        buttons[0][2] = findViewById(R.id.button3);
        buttons[0][3] = findViewById(R.id.button4);
        buttons[0][4] = findViewById(R.id.button5);
        buttons[0][5] = findViewById(R.id.button6);
        buttons[0][6] = findViewById(R.id.button7);
        buttons[0][7] = findViewById(R.id.button8);
        buttons[0][8] = findViewById(R.id.button9);
        buttons[0][9] = findViewById(R.id.button10);
        buttons[0][10] = findViewById(R.id.button11);
        buttons[0][11] = findViewById(R.id.button12);
        /////Row2
        buttons[1][0] = findViewById(R.id.button13);
        buttons[1][1] = findViewById(R.id.button14);
        buttons[1][2] = findViewById(R.id.button15);
        buttons[1][3] = findViewById(R.id.button16);
        buttons[1][4] = findViewById(R.id.button17);
        buttons[1][5] = findViewById(R.id.button18);
        buttons[1][6] = findViewById(R.id.button19);
        buttons[1][7] = findViewById(R.id.button20);
        buttons[1][8] = findViewById(R.id.button21);
        buttons[1][9] = findViewById(R.id.button22);
        buttons[1][10] = findViewById(R.id.button23);
        buttons[1][11] = findViewById(R.id.button24);
        /////Row3
        buttons[2][0] = findViewById(R.id.button25);
        buttons[2][1] = findViewById(R.id.button26);
        buttons[2][2] = findViewById(R.id.button27);
        buttons[2][3] = findViewById(R.id.button28);
        buttons[2][4] = findViewById(R.id.button29);
        buttons[2][5] = findViewById(R.id.button30);
        buttons[2][6] = findViewById(R.id.button31);
        buttons[2][7] = findViewById(R.id.button32);
        buttons[2][8] = findViewById(R.id.button33);
        buttons[2][9] = findViewById(R.id.button34);
        buttons[2][10] = findViewById(R.id.button35);
        buttons[2][11] = findViewById(R.id.button36);
        ////Row4
        buttons[3][0] = findViewById(R.id.button37);
        buttons[3][1] = findViewById(R.id.button38);
        buttons[3][2] = findViewById(R.id.button39);
        buttons[3][3] = findViewById(R.id.button40);
        buttons[3][4] = findViewById(R.id.button41);
        buttons[3][5] = findViewById(R.id.button42);
        buttons[3][6] = findViewById(R.id.button43);
        buttons[3][7] = findViewById(R.id.button44);
        buttons[3][8] = findViewById(R.id.button45);
        buttons[3][9] = findViewById(R.id.button46);
        buttons[3][10] = findViewById(R.id.button47);
        buttons[3][11] = findViewById(R.id.button48);
        ////Row5
        buttons[4][0] = findViewById(R.id.button49);
        buttons[4][1] = findViewById(R.id.button50);
        buttons[4][2] = findViewById(R.id.button51);
        buttons[4][3] = findViewById(R.id.button52);
        buttons[4][4] = findViewById(R.id.button53);
        buttons[4][5] = findViewById(R.id.button54);
        buttons[4][6] = findViewById(R.id.button55);
        buttons[4][7] = findViewById(R.id.button56);
        buttons[4][8] = findViewById(R.id.button57);
        buttons[4][9] = findViewById(R.id.button58);
        buttons[4][10] = findViewById(R.id.button59);
        buttons[4][11] = findViewById(R.id.button60);
        ////Row6
        buttons[5][0] = findViewById(R.id.button61);
        buttons[5][1] = findViewById(R.id.button62);
        buttons[5][2] = findViewById(R.id.button63);
        buttons[5][3] = findViewById(R.id.button64);
        buttons[5][4] = findViewById(R.id.button65);
        buttons[5][5] = findViewById(R.id.button66);
        buttons[5][6] = findViewById(R.id.button67);
        buttons[5][7] = findViewById(R.id.button68);
        buttons[5][8] = findViewById(R.id.button69);
        buttons[5][9] = findViewById(R.id.button70);
        buttons[5][10] = findViewById(R.id.button71);
        buttons[5][11] = findViewById(R.id.button72);
        ////Row7
        buttons[6][0] = findViewById(R.id.button73);
        buttons[6][1] = findViewById(R.id.button74);
        buttons[6][2] = findViewById(R.id.button75);
        buttons[6][3] = findViewById(R.id.button76);
        buttons[6][4] = findViewById(R.id.button77);
        buttons[6][5] = findViewById(R.id.button78);
        buttons[6][6] = findViewById(R.id.button79);
        buttons[6][7] = findViewById(R.id.button80);
        buttons[6][8] = findViewById(R.id.button81);
        buttons[6][9] = findViewById(R.id.button82);
        buttons[6][10] = findViewById(R.id.button83);
        buttons[6][11] = findViewById(R.id.button84);
        ////Row8
        buttons[7][0] = findViewById(R.id.button85);
        buttons[7][1] = findViewById(R.id.button86);
        buttons[7][2] = findViewById(R.id.button87);
        buttons[7][3] = findViewById(R.id.button88);
        buttons[7][4] = findViewById(R.id.button89);
        buttons[7][5] = findViewById(R.id.button90);
        buttons[7][6] = findViewById(R.id.button91);
        buttons[7][7] = findViewById(R.id.button92);
        buttons[7][8] = findViewById(R.id.button93);
        buttons[7][9] = findViewById(R.id.button94);
        buttons[7][10] = findViewById(R.id.button95);
        buttons[7][11] = findViewById(R.id.button96);
        ////Row9
        buttons[8][0] = findViewById(R.id.button97);
        buttons[8][1] = findViewById(R.id.button98);
        buttons[8][2] = findViewById(R.id.button99);
        buttons[8][3] = findViewById(R.id.button100);
        buttons[8][4] = findViewById(R.id.button101);
        buttons[8][5] = findViewById(R.id.button102);
        buttons[8][6] = findViewById(R.id.button103);
        buttons[8][7] = findViewById(R.id.button104);
        buttons[8][8] = findViewById(R.id.button105);
        buttons[8][9] = findViewById(R.id.button106);
        buttons[8][10] = findViewById(R.id.button107);
        buttons[8][11] = findViewById(R.id.button108);
        ////Row10
        buttons[9][0] = findViewById(R.id.button109);
        buttons[9][1] = findViewById(R.id.button110);
        buttons[9][2] = findViewById(R.id.button111);
        buttons[9][3] = findViewById(R.id.button112);
        buttons[9][4] = findViewById(R.id.button113);
        buttons[9][5] = findViewById(R.id.button114);
        buttons[9][6] = findViewById(R.id.button115);
        buttons[9][7] = findViewById(R.id.button116);
        buttons[9][8] = findViewById(R.id.button117);
        buttons[9][9] = findViewById(R.id.button118);
        buttons[9][10] = findViewById(R.id.button119);
        buttons[9][11] = findViewById(R.id.button120);
        ////Row11
        buttons[10][0] = findViewById(R.id.button121);
        buttons[10][1] = findViewById(R.id.button122);
        buttons[10][2] = findViewById(R.id.button123);
        buttons[10][3] = findViewById(R.id.button124);
        buttons[10][4] = findViewById(R.id.button125);
        buttons[10][5] = findViewById(R.id.button126);
        buttons[10][6] = findViewById(R.id.button127);
        buttons[10][7] = findViewById(R.id.button128);
        buttons[10][8] = findViewById(R.id.button129);
        buttons[10][9] = findViewById(R.id.button130);
        buttons[10][10] = findViewById(R.id.button131);
        buttons[10][11] = findViewById(R.id.button132);
        ////Row12
        buttons[11][0] = findViewById(R.id.button133);
        buttons[11][1] = findViewById(R.id.button134);
        buttons[11][2] = findViewById(R.id.button135);
        buttons[11][3] = findViewById(R.id.button136);
        buttons[11][4] = findViewById(R.id.button137);
        buttons[11][5] = findViewById(R.id.button138);
        buttons[11][6] = findViewById(R.id.button139);
        buttons[11][7] = findViewById(R.id.button140);
        buttons[11][8] = findViewById(R.id.button141);
        buttons[11][9] = findViewById(R.id.button142);
        buttons[11][10] = findViewById(R.id.button143);
        buttons[11][11] = findViewById(R.id.button144);
        ////Row13
        buttons[12][0] = findViewById(R.id.button145);
        buttons[12][1] = findViewById(R.id.button146);
        buttons[12][2] = findViewById(R.id.button147);
        buttons[12][3] = findViewById(R.id.button148);
        buttons[12][4] = findViewById(R.id.button149);
        buttons[12][5] = findViewById(R.id.button150);
        buttons[12][6] = findViewById(R.id.button151);
        buttons[12][7] = findViewById(R.id.button152);
        buttons[12][8] = findViewById(R.id.button153);
        buttons[12][9] = findViewById(R.id.button154);
        buttons[12][10] = findViewById(R.id.button155);
        buttons[12][11] = findViewById(R.id.button156);
        ////Row14
        buttons[13][0] = findViewById(R.id.button157);
        buttons[13][1] = findViewById(R.id.button158);
        buttons[13][2] = findViewById(R.id.button159);
        buttons[13][3] = findViewById(R.id.button160);
        buttons[13][4] = findViewById(R.id.button161);
        buttons[13][5] = findViewById(R.id.button162);
        buttons[13][6] = findViewById(R.id.button163);
        buttons[13][7] = findViewById(R.id.button164);
        buttons[13][8] = findViewById(R.id.button165);
        buttons[13][9] = findViewById(R.id.button166);
        buttons[13][10] = findViewById(R.id.button167);
        buttons[13][11] = findViewById(R.id.button168);
        ////Row15
        buttons[14][0] = findViewById(R.id.button169);
        buttons[14][1] = findViewById(R.id.button170);
        buttons[14][2] = findViewById(R.id.button171);
        buttons[14][3] = findViewById(R.id.button172);
        buttons[14][4] = findViewById(R.id.button173);
        buttons[14][5] = findViewById(R.id.button174);
        buttons[14][6] = findViewById(R.id.button175);
        buttons[14][7] = findViewById(R.id.button176);
        buttons[14][8] = findViewById(R.id.button177);
        buttons[14][9] = findViewById(R.id.button178);
        buttons[14][10] = findViewById(R.id.button179);
        buttons[14][11] = findViewById(R.id.button180);
        ////Row16
        buttons[15][0] = findViewById(R.id.button181);
        buttons[15][1] = findViewById(R.id.button182);
        buttons[15][2] = findViewById(R.id.button183);
        buttons[15][3] = findViewById(R.id.button184);
        buttons[15][4] = findViewById(R.id.button185);
        buttons[15][5] = findViewById(R.id.button186);
        buttons[15][6] = findViewById(R.id.button187);
        buttons[15][7] = findViewById(R.id.button188);
        buttons[15][8] = findViewById(R.id.button189);
        buttons[15][9] = findViewById(R.id.button190);
        buttons[15][10] = findViewById(R.id.button191);
        buttons[15][11] = findViewById(R.id.button192);
        ////Row17
        buttons[16][0] = findViewById(R.id.button193);
        buttons[16][1] = findViewById(R.id.button194);
        buttons[16][2] = findViewById(R.id.button195);
        buttons[16][3] = findViewById(R.id.button196);
        buttons[16][4] = findViewById(R.id.button197);
        buttons[16][5] = findViewById(R.id.button198);
        buttons[16][6] = findViewById(R.id.button199);
        buttons[16][7] = findViewById(R.id.button200);
        buttons[16][8] = findViewById(R.id.button201);
        buttons[16][9] = findViewById(R.id.button202);
        buttons[16][10] = findViewById(R.id.button203);
        buttons[16][11] = findViewById(R.id.button204);
        ////Row18
        buttons[17][0] = findViewById(R.id.button205);
        buttons[17][1] = findViewById(R.id.button206);
        buttons[17][2] = findViewById(R.id.button207);
        buttons[17][3] = findViewById(R.id.button208);
        buttons[17][4] = findViewById(R.id.button209);
        buttons[17][5] = findViewById(R.id.button210);
        buttons[17][6] = findViewById(R.id.button211);
        buttons[17][7] = findViewById(R.id.button212);
        buttons[17][8] = findViewById(R.id.button213);
        buttons[17][9] = findViewById(R.id.button214);
        buttons[17][10] = findViewById(R.id.button215);
        buttons[17][11] = findViewById(R.id.button216);
        ////Row19
        buttons[18][0] = findViewById(R.id.button217);
        buttons[18][1] = findViewById(R.id.button218);
        buttons[18][2] = findViewById(R.id.button219);
        buttons[18][3] = findViewById(R.id.button220);
        buttons[18][4] = findViewById(R.id.button221);
        buttons[18][5] = findViewById(R.id.button222);
        buttons[18][6] = findViewById(R.id.button223);
        buttons[18][7] = findViewById(R.id.button224);
        buttons[18][8] = findViewById(R.id.button225);
        buttons[18][9] = findViewById(R.id.button226);
        buttons[18][10] = findViewById(R.id.button227);
        buttons[18][11] = findViewById(R.id.button228);
        ////Row20
        buttons[19][0] = findViewById(R.id.button229);
        buttons[19][1] = findViewById(R.id.button230);
        buttons[19][2] = findViewById(R.id.button231);
        buttons[19][3] = findViewById(R.id.button232);
        buttons[19][4] = findViewById(R.id.button233);
        buttons[19][5] = findViewById(R.id.button234);
        buttons[19][6] = findViewById(R.id.button235);
        buttons[19][7] = findViewById(R.id.button236);
        buttons[19][8] = findViewById(R.id.button237);
        buttons[19][9] = findViewById(R.id.button238);
        buttons[19][10] = findViewById(R.id.button239);
        buttons[19][11] = findViewById(R.id.button240);




        DisplaySize = getWindowManager().getDefaultDisplay();
        final Point Size = new Point();
        DisplaySize.getSize(Size);
        DisplayWidth = Size.x;
        DisplayHeight = Size.y;
        wordsItems = new ArrayList<>();
        wordsAdaptor = new WordsAdaptor(this, wordsItems);


        //Check For Update
        CheckUpdate("Auto");


        iabHelper.startSetup(new IabHelper.OnIabSetupFinishedListener() {
            @Override
            public void onIabSetupFinished(IabResult result) {
                if (result.isSuccess()) BazarInstalation=true;
                else  BazarInstalation=false;

            }
        });

        //Setting ActionBar
        this.getSupportActionBar().setDisplayOptions(ActionBar.DISPLAY_SHOW_CUSTOM);
        getSupportActionBar().setDisplayShowCustomEnabled(true);
        getSupportActionBar().setCustomView(R.layout.actionbar);
        View view = getSupportActionBar().getCustomView();
        ImageView GoBack = view.findViewById(R.id.imageButton);
        Skip = view.findViewById(R.id.imageButton2);
        if (shPref.getString("Level",null).equals(intent.getStringExtra("Level")) && (!shPref.getString("Level",null).equals("54")))Skip.setVisibility(View.VISIBLE);
        TextView textViewActionBar=view.findViewById(R.id.textViewActionBar);
        //GoBack.getLayoutParams().width=findViewById(R.id.textView).getLayoutParams().width;
        //GoBack.getLayoutParams().height=findViewById(R.id.textView).getLayoutParams().height;
        GoBack.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (!HasWin) {
                    exit = 1;
                    Exit(true);
                }
            }
        });
        Skip.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                InAppPurchase();
            }
        });

        //Setting Level
        Level = Integer.valueOf(intent.getStringExtra("Level"));



        //Setting Level TextView
        FaNums faNums = new FaNums();
        textViewLevel.setText("مرحله " +faNums.ToPersian(String.valueOf(Level)));
        textViewLevel.setTypeface(typefaceTitr);


        //Deleting Temp...
        sEditor.remove("Save:TempWords");
        sEditor.apply();
        sEditor.commit();



        //Setting Word Marque TextView
        SetMarque();
        /*String Marque="";
        String Data2="";
        if (shPref.getString("Save:Words",null)!=null && shPref.getString("Save:Level",null).equals(String.valueOf(Level))){
            Data2=shPref.getString("Save:Words",null);
            //Load=true;
        }
        //for (int a=1;a<=Data2.length();a++){
       //     if (Load==true && Character.toString(Data2.charAt(a-1)).equals("1"))
        //        Check[a-1]=true;
        //    else Check[a-1]=false;
       // }
        for (int j=1;j<=TabWords[Level-1].length;j,+){
            if (Data2.charAt(j-1)=='0')
            Marque=Marque+String.valueOf(j)+"-"+TabWords[Level-1][j-1]+" | ";
        }
        textViewMarque.setText(Marque);
        textViewMarque.setSelected(true);
        textViewMarque.setEllipsize(TextUtils.TruncateAt.MARQUEE);
        textViewMarque.setSingleLine(true);*/




        //Setting TabLayoutSize
         tabLayout.getLayoutParams().height=DisplayHeight/20;
        //Setting Table Size
        //int min = 0;

        /*if ((DisplayWidth / (TabSize[Level - 1][0]+1)) > ((DisplayHeight) / (TabSize[Level - 1][1])+3)) {
            min = (DisplayHeight) / (TabSize[Level - 1][1] + 3);
            Toast.makeText(MainActivity.this,"Type1",Toast.LENGTH_LONG).show();
            textViewMarque.setTextSize(min/4);///Setting Marque Size
            textViewLevel.setTextSize(min/4); ///Setting Marque Size
        }
        else{
            min = (DisplayWidth) / (TabSize[Level - 1][0]-3);
            Toast.makeText(MainActivity.this,"Type2",Toast.LENGTH_LONG).show();
            textViewMarque.setTextSize(min/4);///Setting Marque Size
            textViewLevel.setTextSize(min/4); ///Setting Marque Size
        }*/

        Resources resources=getApplicationContext().getResources();
        int NavigationBar=resources.getIdentifier("navigation_bar_height","dimen","android");
        //int textViewsSize=(DisplayHeight-tabLayout.getLayoutParams().height -textViewActionBar.getLayoutParams().height -resources.getDimensionPixelSize(NavigationBar))/(TabSize[Level-1][0]+1 );
        Log.d("Ann",String.valueOf(resources.getDimensionPixelSize(NavigationBar)));
        float W=DisplayWidth/(TabSize[Level -1][1]+1);
        float H=(DisplayHeight-tabLayout.getLayoutParams().height -textViewActionBar.getLayoutParams().height -resources.getDimensionPixelSize(NavigationBar))/(TabSize[Level-1][0]+3);
        //float H=(DisplayHeight-tabLayout.getLayoutParams().height-500)/(TabSize[Level-1][0]+1);
        float HRemain=0,WRemain=0,min=0;

        if (W < H){
            min=W;
            Log.d("Ann","Type:W");
        }else{
            min=H;
            Log.d("Ann","Type:H");
        }
            WRemain=DisplayWidth-(min*(TabSize[Level -1][1]+1));
            HRemain=DisplayHeight-(min*(TabSize[Level -1][0]+1));
        Log.d("Ann","Width:"+String.valueOf(DisplayWidth));
        Log.d("Ann","Height:"+String.valueOf(DisplayHeight));
        Log.d("Ann","Min:"+String.valueOf(min));
        Log.d("Ann","WRemain:"+String.valueOf(WRemain));
        Log.d("Ann","HRemain:"+String.valueOf(HRemain));

/*        while (WRemain<0 || HRemain<0){
            min=min-1;
            WRemain=DisplayWidth-(min*(TabSize[Level -1][1]+1));
            HRemain=DisplayHeight-(min*(TabSize[Level -1][0]+1));
            Log.d("Ann","DecreaseMin:"+String.valueOf(min));
            Log.d("Ann","DecreaseWRemain:"+String.valueOf(WRemain));
            Log.d("Ann","DecreaseHRemain:"+String.valueOf(HRemain));
            / *if (WRemain>=0 && HRemain>=0) {
                min=min+1;
                WRemain=DisplayWidth-(min*TabSize[Level -1][1]);
                HRemain=DisplayHeight-(min*TabSize[Level -1][0]);
                Log.d("Ann","DeBreak:"+String.valueOf(min));
                break;
            }* /
        }
        while (WRemain>0 && HRemain>0){
            min=min+1;
            WRemain=DisplayWidth-(min*(TabSize[Level -1][1]+1));
            HRemain=DisplayHeight-(min*(TabSize[Level -1][0]+1));
            Log.d("Ann","IncreaseMin:"+String.valueOf(min));
            Log.d("Ann","IncreaseWRemain:"+String.valueOf(WRemain));
            Log.d("Ann","IncreaseHRemain:"+String.valueOf(HRemain));
            if (WRemain<=0 || HRemain<=0) {
                min=min-1;
                WRemain=DisplayWidth-(min*(TabSize[Level -1][1]+1));
                HRemain=DisplayHeight-(min*(TabSize[Level -1][0]+1));
                Log.d("Ann","InBreak:"+String.valueOf(min));
                break;
            }
        }*/
        Log.d("Ann","FinalMin:"+String.valueOf(min));
        //textViewMarque.setTextSize(min/4);///Setting Marque Size
        //textViewLevel.setTextSize(min/4); ///Setting Marque Size

      /*  int Decrease=0;
while(min == 0) {
    int W1 = (DisplayWidth-Decrease) / (TabSize[Level - 1][1] + 1);
    int H1 = (DisplayHeight - (tabLayout.getLayoutParams().height + ((DisplayHeight / 20)) + Decrease)) / (TabSize[Level - 1][0]) + 2;
    Toast.makeText(MainActivity.this, String.valueOf(H1), Toast.LENGTH_LONG).show();
    if (H1 * (TabSize[Level - 1][1] + 1) < DisplayWidth) {
        min = H1;
        Toast.makeText(MainActivity.this, "Type1", Toast.LENGTH_LONG).show();
        textViewMarque.setTextSize(min / 4);///Setting Marque Size
        textViewLevel.setTextSize(min / 4); ///Setting Marque Size
        break;
    } else if (W1 * (TabSize[Level - 1][0] + 1)+tabLayout.getLayoutParams().height + ((DisplayHeight / 20)) < (DisplayHeight)) {
        min = W1;
        Toast.makeText(MainActivity.this, "Type2", Toast.LENGTH_LONG).show();
        textViewMarque.setTextSize(min / 4);///Setting Marque Size
        textViewLevel.setTextSize(min / 4); ///Setting Marque Size
        break;
    }
    Decrease=Decrease+1;
}*/


        for (int q = 1; q <= TabSize[Level - 1][0]; q++) {
            for (int w = 1; w <= TabSize[Level - 1][1]; w++) {
              //  Log.d("Size",String.valueOf(TabSize[Level-1][0])+","+String.valueOf(TabSize[Level-1][1]));
                //buttons[q - 1][w - 1].getLayoutParams().width = min;
                //buttons[q - 1][w - 1].getLayoutParams().height = min;
                buttons[q - 1][w - 1].getLayoutParams().width =Math.round(min);
                buttons[q - 1][w - 1].getLayoutParams().height = Math.round(min);
                buttons[q - 1][w - 1].setVisibility(View.VISIBLE);
                buttons[q - 1][w - 1].setBackgroundResource(R.drawable.notchoosen_border);
                buttons[q - 1][w - 1].setTypeface(typefaceTitr);
                float TextSize=Math.round((buttons[q - 1][w - 1].getLayoutParams().height)/1.5);



                buttons[q - 1][w - 1].setTextSize(0,TextSize); //font size
               // buttons[q - 1][w - 1].setTextSize(TextSize); //font size





                //textViewMarque.setTextSize(14);///Setting Marque Size
                //textViewLevel.setTextSize(14);///Setting Marque Size
            }
        }
        textViewMarque.setTextSize(0,buttons[0][0].getTextSize());///Setting Marque Size
        textViewLevel.setTextSize(min/4); ///Setting Marque Size

        Log.d("Size","ButtonTextSize : "+String.valueOf(buttons[0][0].getTextSize())+" , "+String.valueOf((buttons[0][0].getLayoutParams().height)/3)+" , "+String.valueOf(buttons[0][0].getLayoutParams().height));
        Log.d("Size","ButtonTextSize : "+String.valueOf(buttons[0][1].getTextSize())+" , "+String.valueOf((buttons[0][1].getLayoutParams().height)/3)+" , "+String.valueOf(buttons[0][1].getLayoutParams().height));
        Log.d("Size","ButtonTextSize : "+String.valueOf(buttons[0][2].getTextSize())+" , "+String.valueOf((buttons[0][2].getLayoutParams().height)/3)+" , "+String.valueOf(buttons[0][2].getLayoutParams().height));
        Log.d("Size","ButtonTextSize : "+String.valueOf(buttons[0][3].getTextSize())+" , "+String.valueOf((buttons[0][3].getLayoutParams().height)/3)+" , "+String.valueOf(buttons[0][3].getLayoutParams().height));

        Log.d("Size","PhoneSize: "+String.valueOf(DisplayWidth)+"*"+String.valueOf((DisplayHeight-tabLayout.getLayoutParams().height -textViewActionBar.getLayoutParams().height -resources.getDimensionPixelSize(NavigationBar))));



        //Filling Table Letters
        int WHhich = -1;
        for (int e = 1; e <= (TabSize[Level - 1][0]); e++) {
            for (int r = 1; r <= (TabSize[Level - 1][1]); r++) {
                WHhich = WHhich + 1;
                //buttons[e-1][r-1].setText(Character.toString(TabLetters[Level-1].charAt((e*r)-1)));
                buttons[e - 1][r - 1].setText(Character.toString(TabLetters[Level - 1].charAt(WHhich)));

            }

        }

        //Filling ListView Words
        AddWords();
        tabLayout.addOnTabSelectedListener(new TabLayout.OnTabSelectedListener() {
            @Override
            public void onTabSelected(TabLayout.Tab tab) {
                if (tabLayout.getSelectedTabPosition() == 0) {
                    consTable.setVisibility(View.VISIBLE);
                    consWords.setVisibility(View.GONE);
                    SetMarque();

                }
                if (tabLayout.getSelectedTabPosition() == 1) {
                    consTable.setVisibility(View.GONE);
                    consWords.setVisibility(View.VISIBLE);

                }

            }

            @Override
            public void onTabUnselected(TabLayout.Tab tab) {

            }

            @Override
            public void onTabReselected(TabLayout.Tab tab) {

            }
        });

        ConstraintLayout constraintLayout;
        constraintLayout = findViewById(R.id.ConstraintLayoutMain);
        buttons[0][0].setOnTouchListener(new SwipeTouchListener() {
            public boolean onSwipeRight() {
                Toast.makeText(MainActivity.this, "Swipe Right", Toast.LENGTH_SHORT).show();
                //tabLayout.getTabAt(1).select();
                return true;
            }
        });


        if (shPref.getString("Save:Level", null) != null) {
            if (shPref.getString("Save:Level", null).equals(String.valueOf(Level))) {
                String Data = shPref.getString("Save:Data", null);
                int Which2 = 0;
                for (int a = 1; a <= TabSize[Level - 1][0]; a++) {
                    for (int s = 1; s <= TabSize[Level - 1][1]; s++) {
                        Which2 = Which2 + 1;
                        if (Character.toString(Data.charAt(Which2 - 1)).equals("1")) {
                            onClick(findViewById(buttons[a - 1][s - 1].getId()));
                            Change = 0;
                        }
                    }

                }
            }
        }


       if (shPref.getString("Manual",null).equals("false")) Manual();
       PathFinder();
    }

    public void onClick(View view) {
        Change = 1;
        Button buttononClick = findViewById(view.getId());
        if (buttononClick.getTag().equals("NotChoosen")) {
            // buttononClick.setBackgroundColor(Color.CYAN);
            buttononClick.setBackgroundResource(R.drawable.choosen_border);
            buttononClick.setTag("Choosen");
        } else {
            //buttononClick.setBackgroundColor(Color.WHITE);
            buttononClick.setBackgroundResource(R.drawable.notchoosen_border);
            buttononClick.setTag("NotChoosen");
        }
        int Correct = 0;
        int Which = 0;
        String[] Code = TabCode[Level - 1].split("-");
        for (int t = 1; t <= (TabSize[Level - 1][0]); t++) {

            for (int y = 1; y <= (TabSize[Level - 1][1]); y++) {
                //Which=Which+1;
                Which = ((t - 1) * 12) + y;
                Log.d("Which", String.valueOf(Which));

                if (buttons[t - 1][y - 1].getTag().equals("NotChoosen")) {
                    int NotCorrect = 0;
                    for (int u = 1; u <= Code.length; u++) {
                        if (Which == Integer.valueOf(Code[u - 1])) Correct = Correct + 1;
                        else NotCorrect = NotCorrect + 1;
                    }
                    if (NotCorrect == Code.length) Correct = Correct - 1;
                }


            }
        }
        Log.d("Correct", String.valueOf(Correct));
        if (Correct == Integer.valueOf(Code.length)) {
            final AlertDialog.Builder builder = new AlertDialog.Builder(new ContextThemeWrapper(this,R.style.AlerDialog));
            final AlertDialog alertDialog=builder.create();
            LayoutInflater layoutinflater = getLayoutInflater();
            View Dview = layoutinflater.inflate(R.layout.status_alert,null);
            TextView Title = (TextView) Dview.findViewById(R.id.textViewTitle_AD);
            TextView Message = (TextView) Dview.findViewById(R.id.textViewMessage_AD);
            TextView Continue = (TextView) Dview.findViewById(R.id.textViewContinue_AD);
            TextView Exit = (TextView) Dview.findViewById(R.id.textViewExit_AD);
            builder.setCancelable(false);
            builder.setView(Dview);
            Title.setText("شما برنده شدید");
            HasWin=true;
            Message.setText("رمز جدول: |' "+TabPass[Level-1]+" '|");
            final Intent intent = new Intent(MainActivity.this, LevelActivity.class);
            Continue.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    if (Integer.valueOf(shPref.getString("Level", null)) <= Level)
                        startActivity(intent);
                    else finish();
                }
            });
            //builder.show();
            if (Integer.valueOf(shPref.getString("Level", null)) <= Level && Level != MaxLevel) {
                sEditor.putString("Level", String.valueOf(Integer.valueOf(shPref.getString("Level", null)) + 1));
                sEditor.apply();
                Log.d("LevelUp", "True");
            } else Log.d("LevelUp", "False");
            Snackbar snackbar=Snackbar.make(findViewById(R.id.ConstraintLayoutMain),"شما برنده شدید",Snackbar.LENGTH_INDEFINITE);
            TextView textView = (TextView) snackbar.getView().findViewById(com.google.android.material.R.id.snackbar_text);
            textView.setTypeface(typefaceTitr);
            textView.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
            snackbar.show();
            new CountDownTimer(5000,1000){
                @Override
                public void onTick(long time) {
                    int Colnum;
                    int Row;
                    if ((time>=1000 && time<2000) || (time>=3000 && time<4000) ||(time>=5000 && time<5000)){
                        String[] Code = TabCode[Level - 1].split("-");
                        for (int v=1;v<=Code.length;v++){
                            Colnum=Integer.valueOf(Code[v-1]);
                            Row=1;
                            while (Colnum>12){
                                Row=Row+1;
                                Colnum=Colnum-12;
                            }
                            buttons[Row-1][Colnum-1].setBackgroundResource(R.drawable.win1_border);
                        }
                    }else{
                        String[] Code = TabCode[Level - 1].split("-");
                        for (int v=1;v<=Code.length;v++){
                            Colnum=Integer.valueOf(Code[v-1]);
                            Row=1;
                            while (Colnum>12){
                                Row=Row+1;
                                Colnum=Colnum-12;
                            }
                            buttons[Row-1][Colnum-1].setBackgroundResource(R.drawable.win2_border);
                        }
                    }

                }

                @Override
                public void onFinish() {
                    /*TextView textViewMessage = (TextView) alertDialog.findViewById(android.R.id.title);
                    textViewMessage.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
                    textViewMessage.setTypeface(typefaceTitr);*/
                         builder.show();

                }
            }.start();
        }


    }



    public void AddWords() {
        boolean[] Check=new boolean[400];
        boolean Load=false;
        String Data2="";
        if (shPref.getString("Save:Words",null)!=null && shPref.getString("Save:Level",null).equals(String.valueOf(Level))){
            Data2=shPref.getString("Save:Words",null);
            Load=true;
        }
        for (int a=1;a<=Data2.length();a++){
            if (Load==true && Character.toString(Data2.charAt(a-1)).equals("1"))
                Check[a-1]=true;
            else Check[a-1]=false;
        }
        for (int i = 1; i <= TabWords[Level - 1].length; i++) {
            wordsItems.add(new WordsItems(TabWords[Level - 1][i - 1], Check[i-1], TabWords[Level-1].length,Level));
        }

        listView.setAdapter(wordsAdaptor);
    }

    @Override
    public void onBackPressed() {
        //super.onBackPressed();
        Exit(false);

    }
    public void SetMarque(){
        //Setting Word Marque TextView
        String Marque="";
        String Data2="";
        if (shPref.getString("Save:TempWords",null)!=null){
            Data2=shPref.getString("Save:TempWords",null);
            //Load=true;
        }else if (shPref.getString("Save:Words",null)!=null && shPref.getString("Save:Level",null).equals(String.valueOf(Level))) {
            Data2 = shPref.getString("Save:Words", null);
            //Load=true;
        }
        int Num=0;
        for (int j=1;j<=TabWords[Level-1].length;j++){
            if (!Data2.equals("")){
                if (Data2.charAt(j-1)=='0'){
                    Num=Num+1;
                    Marque=Marque+String.valueOf(Num)+"-"+TabWords[Level-1][j-1]+" | ";
                }
            }else{
                Num=Num+1;
                Marque=Marque+String.valueOf(Num)+"-"+TabWords[Level-1][j-1]+" | ";
            }

        }
        textViewMarque.setText(Marque);
        textViewMarque.setSelected(true);
        textViewMarque.setEllipsize(TextUtils.TruncateAt.MARQUEE);
        textViewMarque.setSingleLine(true);
    }

    public void CheckUpdate(final String Way) {
        if (IsNetwork(MainActivity.this)) {
            ApiInterface apiInterface=API.getAPI().create(ApiInterface.class);
            Call<WebService> UpdateCall = apiInterface.loginCall("2", String.valueOf(BuildConfig.VERSION_CODE));
            UpdateCall.enqueue(new Callback<WebService>() {
                @Override
                public void onResponse(Call<WebService> call, final Response<WebService> response) {
                    if (response.body().getStatus().equals("Available")) {
                        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                        final AlertDialog alertDialog = builder.create();
                        builder.setTitle("بروزرسانی جدیدی در دسترس است.");
                        builder.setMessage("ایا مایل هستید ان را دریافت کنید؟");
                        builder.setPositiveButton("اره", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                Intent intent = new Intent(Intent.ACTION_VIEW);
                                intent.setData(Uri.parse(response.body().getLink()));
                                startActivity(intent);
                            }
                        });
                        builder.setNegativeButton("نه", new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialogInterface, int i) {
                                alertDialog.dismiss();
                            }
                        });
                        builder.show();

                    } else {
                        if (Way.equals("Manual")) {
                            Snackbar.make(findViewById(R.id.ConstraintLayoutMain), "نسخه شما بروز است", Snackbar.LENGTH_LONG).show();
                        }
                    }
                }

                @Override
                public void onFailure(Call<WebService> call, Throwable t) {
                  //Toast.makeText(MainActivity.this,t.getMessage().toString(),Toast.LENGTH_SHORT).show();
                }
            });
        } else if (Way.equals("Manual")) {
                Snackbar.make(findViewById(R.id.ConstraintLayoutMain), "لطفا اتصال اینترنت خود را بررسی کنید", Snackbar.LENGTH_LONG).show();
        }
    }

    public boolean IsNetwork(Context context) {
        ConnectivityManager cm = (ConnectivityManager) context
                .getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo netInfo = cm.getActiveNetworkInfo();
        if (netInfo != null && netInfo.isConnectedOrConnecting()) {
            return true;
        }
        return false;

    }


    public void Exit(final boolean Way){
        CountDownTimer A = new CountDownTimer(3000, 1000) {

            @Override
            public void onTick(long l) {

            }

            @Override
            public void onFinish() {
                exit = 0;
            }
        };
        if (exit == 1) {
            if (Change == 1) {
                SweetAlertDialog sweetAlertDialog = new SweetAlertDialog(this, SweetAlertDialog.CUSTOM_IMAGE_TYPE);
                sweetAlertDialog.setTitle("ذخیره فعالیت");
                sweetAlertDialog.setContentText("ایا میخواهید فعالیتتان ذخیره شود؟");
                sweetAlertDialog.setConfirmButton("اره", new SweetAlertDialog.OnSweetClickListener() {
                    @Override
                    public void onClick(SweetAlertDialog sweetAlertDialog) {
                        String Data = "";
                        for (int o = 1; o <= TabSize[Level - 1][0]; o++) {
                            for (int p = 1; p <= TabSize[Level - 1][1]; p++) {
                                if (buttons[o - 1][p - 1].getTag().equals("Choosen"))
                                    Data = Data + "1";
                                else Data = Data + "0";
                            }
                        }
                        int SaveLevel=0;
                        if (shPref.getString("Save:Level",null)!=null)SaveLevel=Integer.valueOf(shPref.getString("Save:Level",null));
                        sEditor.putString("Save:Level", String.valueOf(Level));
                        sEditor.putString("Save:Data", Data);
                        if (shPref.getString("Save:TempWords",null)!=null){
                            if (shPref.getString("Save:Words",null)==null || SaveLevel!=Level) sEditor.putString("Save:Words",shPref.getString("Save:TempWords",null));
                            else {
                                sEditor.putString("Save:Words",shPref.getString("Save:TempWords",null));
                                /*String Temp=shPref.getString("Save:TempWords",null);
                                String Last=shPref.getString("Save:Words",null);
                                String New="";
                                for (int v=1;v<=Last.length();v++){
                                    String Value;
                                    if (Character.toString(Last.charAt(v-1)).equals("1")) Value="1";
                                    else Value=Character.toString(Temp.charAt(v-1));
                                    New=New+Value;
                                }
                                sEditor.putString("Save:Words",New);*/
                            }

                        }else if (!shPref.getString("Save:Level",null).equals(String.valueOf(Level))) {
                            String Words="";
                          for (int x=1;x<=TabWords[Level-1].length;x++){
                              Words=Words+"0";
                          }
                          sEditor.putString("Save:Words",Words);
                          sEditor.apply();
                        }


                        sEditor.remove("Save:TempWords");
                        sEditor.commit();
                        sEditor.apply();
                        if (Way)finish();
                        else   finishAffinity();
                    }
                });
                sweetAlertDialog.setCancelButton("نه", new SweetAlertDialog.OnSweetClickListener() {
                    @Override
                    public void onClick(SweetAlertDialog sweetAlertDialog) {
                        sEditor.remove("Save:TempWords");
                        sEditor.apply();
                        sEditor.commit();
                       if (Way)finish();
                         else   finishAffinity();
                    }
                });
                sweetAlertDialog.show();
            } else {
                if (shPref.getString("Save:Data",null)==null){
                    sEditor.remove("Save:TempWords");
                    sEditor.apply();
                    sEditor.commit();
                }
                if (Way)finish();
                else   finishAffinity();
            }
        } else {
            exit = 1;
            A.start();
            Toast.makeText(MainActivity.this, "برای خروج دوباره کلیک کنید", Toast.LENGTH_LONG).show();
        }

    }


    void Manual(){
        BubbleShowCaseBuilder B1 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("سلام."+""+"این بازی از دو بخش اصلی تشکیل شده")
                .backgroundColor(Color.parseColor("#146FF7"));

        BubbleShowCaseBuilder B2 =new BubbleShowCaseBuilder(this)
                .title("بخش اول")
                .textColor(Color.BLACK)
                .description("یه جدوله که پر از حروف مختلفه و شما باید کلمات خواسته شده رو درون این جدول پیدا کنی.")
                .backgroundColor(Color.parseColor("#146FF7"))
                .arrowPosition(BubbleShowCase.ArrowPosition.BOTTOM)
                .targetView(findViewById(R.id.GridLayout));

        FaNums faNums = new FaNums();
        BubbleShowCaseBuilder B3 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("کلمات به "+faNums.ToPersian("8")+" شکل مختلف درون جدول قرار داده شده:")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(findViewById(R.id.GridLayout))
                .arrowPosition(BubbleShowCase.ArrowPosition.BOTTOM)
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        String[] Data2 ={"تهران" , "گرمسار" , "سمنان" , "دامغان" , "شاهرود" , "سبزوار" , "نیشابور" , "مشهد"};
                        String Marque="";
                        int Num=0;
                        for (int x=1;x<=Data2.length;x++){
                          Marque=Marque+String.valueOf(x)+"-"+Data2[x-1]+"|";
                        }
                        wordsItems.clear();
                        for (int i = 1; i <= Data2.length; i++) {
                            wordsItems.add(new WordsItems(Data2[i - 1],false, Data2.length,Level));
                        }
                        listView.setAdapter(wordsAdaptor);
                        textViewMarque.setText(Marque);
                        textViewMarque.setSelected(true);
                        textViewMarque.setEllipsize(TextUtils.TruncateAt.MARQUEE);
                        textViewMarque.setSingleLine(true);
                        HelpTable(0);
                    }
                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        String[] Data2 ={"تهران" , "گرمسار" , "سمنان" , "دامغان" , "شاهرود" , "سبزوار" , "نیشابور" , "مشهد"};
                        String Marque="";
                        int Num=0;
                        for (int x=1;x<=Data2.length;x++){
                            Marque=Marque+String.valueOf(x)+"-"+Data2[x-1]+"|";
                        }
                        wordsItems.clear();
                        for (int i = 1; i <= Data2.length; i++) {
                            wordsItems.add(new WordsItems(Data2[i - 1],false, Data2.length,Level));
                        }
                        listView.setAdapter(wordsAdaptor);
                        textViewMarque.setText(Marque);
                        textViewMarque.setSelected(true);
                        textViewMarque.setEllipsize(TextUtils.TruncateAt.MARQUEE);
                        textViewMarque.setSingleLine(true);
                        HelpTable(0);
                    }
                    @Override
                    public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) {

                    }
                    @Override
                    public void onBubbleClick(BubbleShowCase bubbleShowCase) {

                    }
                });

        BubbleShowCaseBuilder BH1 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("1.کلمه تهران : افقی-از راست به چپ")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(buttons[5][8])
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(1);
                    }
                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(1);
                    }
                    @Override
                    public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) {

                    }
                    @Override
                    public void onBubbleClick(BubbleShowCase bubbleShowCase) {

                    }
                });

        BubbleShowCaseBuilder BH2 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("2.کلمه گرمسار : افقی-از چپ به راست")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(buttons[1][0])
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(2);
                    }

                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                       HelpTable(2);
                    }
                    @Override
                    public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) {

                    }
                    @Override
                    public void onBubbleClick(BubbleShowCase bubbleShowCase) {

                    }
                });

        BubbleShowCaseBuilder BH3 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("3.کلمه سمنان : ستونی-از بالا به پایین")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(buttons[0][2])
                .arrowPosition(BubbleShowCase.ArrowPosition.BOTTOM)
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(3);
                    }

                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(3);
                    }
                    @Override
                    public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) {

                    }
                    @Override
                    public void onBubbleClick(BubbleShowCase bubbleShowCase) {

                    }
                });

        BubbleShowCaseBuilder BH4 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("4.کلمه دامغان : ستونی-از پایین به بالا")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(buttons[9][5])
                .arrowPosition(BubbleShowCase.ArrowPosition.RIGHT)
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(4);
                    }

                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(4);
                    }
                    @Override
                    public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) {

                    }
                    @Override
                    public void onBubbleClick(BubbleShowCase bubbleShowCase) {

                    }
                });

        BubbleShowCaseBuilder BH5 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("5.کلمه شاهرود : مورب-از (بالا-راست) به (پایین-چپ)")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(buttons[1][6])
                .arrowPosition(BubbleShowCase.ArrowPosition.BOTTOM)
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(6);
                    }

                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(6);
                    }
                    @Override
                    public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) {

                    }
                    @Override
                    public void onBubbleClick(BubbleShowCase bubbleShowCase) {

                    }
                });

        BubbleShowCaseBuilder BH8 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("8.کلمه مشهد : مورب-از (پایین-راست) به (بالا-چپ)")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(buttons[9][4])
                .arrowPosition(BubbleShowCase.ArrowPosition.LEFT)
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        for (int q = 1; q <= 10; q++) {
                            for (int w = 1; w <= 9; w++) {
                                buttons[q - 1][w - 1].setBackgroundResource(R.drawable.notchoosen_border);
                            }
                        }
                        int[][][] HelpCode={
                                {  { 5,8 } , { 5,7 } , { 5,6 } , { 5,5 } , { 5,4 } }
                                ,{ { 1,0 } , { 1,1 } , { 1,2 } , { 1,3 } , { 1,4 } , { 1,5 } }
                                ,{ { 0,2 } , { 1,2 } , { 2,2 } , { 3,2 } , { 4,2 } }
                                ,{ { 9,5 } , { 8,5 } , { 7,5 } , { 6,5 } , { 5,5 } , { 4,5 } }
                                ,{ { 1,6 } , { 2,5 } , { 3,4 } , { 4,3 } , { 5,2 } , { 6,1 } }
                                ,{ { 9,4 } , { 8,3 } , { 7,2 } , { 6,1 } }
                                ,{ { 9,1 } , { 8,2 } , { 7,3 } , { 6,4 } , { 5,5 } , { 4,6 } }
                                ,{ { 2,2 } , { 3,3 } , { 4,4 } , { 5,5 } , { 6,6 } , { 7,7 } , { 8,8 } }};
                        for (int v=1;v<=HelpCode[1].length;v++){
                            buttons[HelpCode[1][v-1][0]][HelpCode[1][v-1][1]].setBackgroundResource(R.drawable.choosen_border);
                        }
                        for (int v=1;v<=HelpCode[2].length;v++){
                            buttons[HelpCode[2][v-1][0]][HelpCode[2][v-1][1]].setBackgroundResource(R.drawable.choosen_border);
                        }
                    }

                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        for (int q = 1; q <= 10; q++) {
                            for (int w = 1; w <= 9; w++) {
                                buttons[q - 1][w - 1].setBackgroundResource(R.drawable.notchoosen_border);
                            }
                        }
                        int[][][] HelpCode={
                                {  { 5,8 } , { 5,7 } , { 5,6 } , { 5,5 } , { 5,4 } }
                                ,{ { 1,0 } , { 1,1 } , { 1,2 } , { 1,3 } , { 1,4 } , { 1,5 } }
                                ,{ { 0,2 } , { 1,2 } , { 2,2 } , { 3,2 } , { 4,2 } }
                                ,{ { 9,5 } , { 8,5 } , { 7,5 } , { 6,5 } , { 5,5 } , { 4,5 } }
                                ,{ { 1,6 } , { 2,5 } , { 3,4 } , { 4,3 } , { 5,2 } , { 6,1 } }
                                ,{ { 9,4 } , { 8,3 } , { 7,2 } , { 6,1 } }
                                ,{ { 9,1 } , { 8,2 } , { 7,3 } , { 6,4 } , { 5,5 } , { 4,6 } }
                                ,{ { 2,2 } , { 3,3 } , { 4,4 } , { 5,5 } , { 6,6 } , { 7,7 } , { 8,8 } }};
                        for (int v=1;v<=HelpCode[1].length;v++){
                            buttons[HelpCode[1][v-1][0]][HelpCode[1][v-1][1]].setBackgroundResource(R.drawable.choosen_border);
                        }
                        for (int v=1;v<=HelpCode[2].length;v++){
                            buttons[HelpCode[2][v-1][0]][HelpCode[2][v-1][1]].setBackgroundResource(R.drawable.choosen_border);
                        }
                    }
                    @Override public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) { }
                    @Override public void onBubbleClick(BubbleShowCase bubbleShowCase) { }
                });

        BubbleShowCaseBuilder BH6 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("6.کلمه سبزوار : مورب-از (پایین-چپ) به (بالا-راست)")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(buttons[4][6])
                .arrowPosition(BubbleShowCase.ArrowPosition.BOTTOM)
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(7);
                    }

                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(7);
                    }
                    @Override public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) { }
                    @Override public void onBubbleClick(BubbleShowCase bubbleShowCase) { }
                });

        BubbleShowCaseBuilder BH7 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("7.کلمه نیشابور : مورب-از (بالا-چپ) به (پایین-راست)")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(buttons[2][2])
                .arrowPosition(BubbleShowCase.ArrowPosition.BOTTOM)
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(5);
                    }

                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        HelpTable(5);
                    }
                    @Override public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) { }
                    @Override public void onBubbleClick(BubbleShowCase bubbleShowCase) { }
                });


        BubbleShowCaseBuilder B3_5 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("و حواست باشه که حروف میتونن بین کلماتی که داخل جدول هستن مشترک باشن. مثله حرف 'میم' در دو کلمه زیر:")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(findViewById(R.id.GridLayout))
                .arrowPosition(BubbleShowCase.ArrowPosition.BOTTOM)
                .listener(new BubbleShowCaseListener() {
                    @Override public void onTargetClick(BubbleShowCase bubbleShowCase) { }
                    @Override public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) { }
                    @Override public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) { }
                    @Override public void onBubbleClick(BubbleShowCase bubbleShowCase) { }
                });

        BubbleShowCaseBuilder B4 =new BubbleShowCaseBuilder(this)
                .title("بخش دوم")
                .textColor(Color.BLACK)
                .description("کلمات خواسته شده رو هم میتونی با رفتن به بخش 'کلمات' پیدا کنی.")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(findViewById(R.id.TabLayout))
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        tabLayout.selectTab(tabLayout.getTabAt(1));
                    }
                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        tabLayout.selectTab(tabLayout.getTabAt(1));
                    }
                    @Override
                    public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) {

                    }
                    @Override
                    public void onBubbleClick(BubbleShowCase bubbleShowCase) {

                    }
                });

        BubbleShowCaseBuilder B5 =new BubbleShowCaseBuilder(this)
                .title("بخش دوم")
                .textColor(Color.BLACK)
                .description("هر موقع که کلمه ای پیدا کردی میتونی بیای اینجا و روش کلیک کنی تا تیک بخوره; تا یه وقت اشتباهی دوباره دنبالش نگردی ")
                .backgroundColor(Color.parseColor("#146FF7"))
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        tabLayout.selectTab(tabLayout.getTabAt(0));
                        String[] Data2 ={"تهران" , "گرمسار" , "سمنان" , "دامغان" , "شاهرود" , "سبزوار" , "نیشابور" , "مشهد"};
                        String Marque="";
                        int Num=0;
                        for (int x=1;x<=Data2.length;x++){
                            Marque=Marque+String.valueOf(x)+"-"+Data2[x-1]+"|";
                        }
                        wordsItems.clear();
                        for (int i = 1; i <= Data2.length; i++) {
                            wordsItems.add(new WordsItems(Data2[i - 1],false, Data2.length,Level));
                        }
                        listView.setAdapter(wordsAdaptor);
                        textViewMarque.setText(Marque);
                        textViewMarque.setSelected(true);
                        textViewMarque.setEllipsize(TextUtils.TruncateAt.MARQUEE);
                        textViewMarque.setSingleLine(true);
                    }

                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        tabLayout.selectTab(tabLayout.getTabAt(0));
                        String[] Data2 ={"تهران" , "گرمسار" , "سمنان" , "دامغان" , "شاهرود" , "سبزوار" , "نیشابور" , "مشهد"};
                        String Marque="";
                        int Num=0;
                        for (int x=1;x<=Data2.length;x++){
                            Marque=Marque+String.valueOf(x)+"-"+Data2[x-1]+"|";
                        }
                        wordsItems.clear();
                        for (int i = 1; i <= Data2.length; i++) {
                            wordsItems.add(new WordsItems(Data2[i - 1],false, Data2.length,Level));
                        }
                        listView.setAdapter(wordsAdaptor);
                        textViewMarque.setText(Marque);
                        textViewMarque.setSelected(true);
                        textViewMarque.setEllipsize(TextUtils.TruncateAt.MARQUEE);
                        textViewMarque.setSingleLine(true);
                    }
                    @Override
                    public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) {

                    }
                    @Override
                    public void onBubbleClick(BubbleShowCase bubbleShowCase) {

                    }
                });

        BubbleShowCaseBuilder B6 =new BubbleShowCaseBuilder(this)
                .title("بخش دوم")
                .textColor(Color.BLACK)
                .description("البته کلمات تیک نخورده اینجا هم زیرنویس میشن")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(textViewMarque);

        BubbleShowCaseBuilder B6_5 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("هر موقع هم داخل یه مرحله گیر کردی میتونی با لمس این دکمه و پرداخت 1000 تومن به مرحله بعدی بری.")
                .backgroundColor(Color.parseColor("#146FF7"))
                .targetView(Skip);

        BubbleShowCaseBuilder B7 =new BubbleShowCaseBuilder(this)
                .title("راهنما")
                .textColor(Color.BLACK)
                .description("اگه جدولو درست حل کنی ; چند حرف باقی میمونه که باهم کلمه رمز جدولو میسازن. با حل هر جدول, جدول مرحله بعدی برات باز میشه. ")
                .backgroundColor(Color.parseColor("#146FF7"))
                .listener(new BubbleShowCaseListener() {
                    @Override
                    public void onTargetClick(BubbleShowCase bubbleShowCase) {
                        Intent intent = new Intent(MainActivity.this, LevelActivity.class);
                        intent.putExtra("Manual","true");
                        startActivity(intent);
                    }

                    @Override
                    public void onCloseActionImageClick(BubbleShowCase bubbleShowCase) {
                        Intent intent = new Intent(MainActivity.this, LevelActivity.class);
                        intent.putExtra("Manual","true");
                        startActivity(intent);
                    }
                    @Override
                    public void onBackgroundDimClick(BubbleShowCase bubbleShowCase) {

                    }
                    @Override
                    public void onBubbleClick(BubbleShowCase bubbleShowCase) {

                    }
                });





        /*BubbleShowCaseBuilder B3 =new BubbleShowCaseBuilder(this)
                .title("بخش دوم")
                .textColor(Color.BLACK)
                .description("یه لیست از کلماتیه که باید از توی اون جدوله پیدا کنی.")
                .backgroundColor(Color.parseColor("#146FF7"));
        //.targetView(findViewById(R.id.ListViewWords));*/


BubbleShowCaseSequence bubbleShowCaseSequence= new BubbleShowCaseSequence();
        bubbleShowCaseSequence.addShowCase(B1);
        bubbleShowCaseSequence.addShowCase(B2);
        bubbleShowCaseSequence.addShowCase(B3);
        bubbleShowCaseSequence.addShowCase(BH1);
        bubbleShowCaseSequence.addShowCase(BH2);
        bubbleShowCaseSequence.addShowCase(BH3);
        bubbleShowCaseSequence.addShowCase(BH4);
        bubbleShowCaseSequence.addShowCase(BH5);
        bubbleShowCaseSequence.addShowCase(BH6);
        bubbleShowCaseSequence.addShowCase(BH7);
        bubbleShowCaseSequence.addShowCase(BH8);
        bubbleShowCaseSequence.addShowCase(B3_5);
        bubbleShowCaseSequence.addShowCase(B4);
        bubbleShowCaseSequence.addShowCase(B5);
        bubbleShowCaseSequence.addShowCase(B6);
        bubbleShowCaseSequence.addShowCase(B6_5);
        bubbleShowCaseSequence.addShowCase(B7);
        //bubbleShowCaseSequence.addShowCase(B8);
        bubbleShowCaseSequence.show();





    }
    void HelpTable(int Type){
        int[] HelpSize={10,9};
        int[][][] HelpCode={
                {  { 5,8 } , { 5,7 } , { 5,6 } , { 5,5 } , { 5,4 } }
                ,{ { 1,0 } , { 1,1 } , { 1,2 } , { 1,3 } , { 1,4 } , { 1,5 } }
                ,{ { 0,2 } , { 1,2 } , { 2,2 } , { 3,2 } , { 4,2 } }
                ,{ { 9,5 } , { 8,5 } , { 7,5 } , { 6,5 } , { 5,5 } , { 4,5 } }
                ,{ { 1,6 } , { 2,5 } , { 3,4 } , { 4,3 } , { 5,2 } , { 6,1 } }
                ,{ { 9,4 } , { 8,3 } , { 7,2 } , { 6,1 } }
                ,{ { 9,1 } , { 8,2 } , { 7,3 } , { 6,4 } , { 5,5 } , { 4,6 } }
                ,{ { 2,2 } , { 3,3 } , { 4,4 } , { 5,5 } , { 6,6 } , { 7,7 } , { 8,8 } }};
            String HelpLetters = "ردسهخحچباگرمسارشضصیبنلااتنمسشایهظطزرپونرشنردذگپوچنارهتجدخحوغبهعصثهزقمفوغشسبشیابلردسگکمدنتا";
            //Setting Table Size
            int min = 0;
            for (int q = 1; q <= 20; q++) {
                for (int w = 1; w <= 12; w++) {
                    buttons[q - 1][w - 1].setVisibility(View.GONE);
                }
            }

            if ((DisplayWidth / (HelpSize[0] + 1)) > ((DisplayHeight) / (HelpSize[1]) + 1))
                min = (DisplayHeight) / (HelpSize[1] + 1);
            else min = (DisplayWidth) / (HelpSize[0] + 1);

            for (int q = 1; q <= HelpSize[0]; q++) {
                for (int w = 1; w <= HelpSize[1]; w++) {
                    buttons[q - 1][w - 1].getLayoutParams().width = min;
                    buttons[q - 1][w - 1].getLayoutParams().height = min;
                    buttons[q - 1][w - 1].setVisibility(View.VISIBLE);
                    buttons[q - 1][w - 1].setBackgroundResource(R.drawable.notchoosen_border);
                    buttons[q - 1][w - 1].setTypeface(typefaceTitr);


                    buttons[q - 1][w - 1].setTextSize(buttons[q - 1][w - 1].getLayoutParams().height / 6); //font size

                    textViewMarque.setTextSize(buttons[0][0].getLayoutParams().height / 4);///Setting Marque Size
                    textViewLevel.setTextSize(buttons[0][0].getLayoutParams().height / 4);///Setting Marque Size

                    //textViewMarque.setTextSize(14);///Setting Marque Size
                    //textViewLevel.setTextSize(14);///Setting Marque Size
                }
            }

            //Filling Table Letters
            int WHhich = -1;
            for (int e = 1; e <= (HelpSize[0]); e++) {
                for (int r = 1; r <= (HelpSize[1]); r++) {
                    WHhich = WHhich + 1;
                    //buttons[e-1][r-1].setText(Character.toString(TabLetters[Level-1].charAt((e*r)-1)));
                    buttons[e - 1][r - 1].setText(Character.toString(HelpLetters.charAt(WHhich)));

                }

            }


        for (int v=1;v<=HelpCode[Type].length;v++){
            buttons[HelpCode[Type][v-1][0]][HelpCode[Type][v-1][1]].setBackgroundResource(R.drawable.choosen_border);
        }
    }

public void PathFinder(){
    int CorrectWord=0;
        for (int CTabWord=1;CTabWord<=TabWords[Level-1].length;CTabWord++){
            Log.d("PathFinder",TabWords[Level-1][CTabWord-1]);
            char[] Word=TabWords[Level-1][CTabWord-1].toCharArray();
            //Log.d("PathFinder","Word Length:"+String.valueOf(Word.length));
            for (int Row=1;Row<=TabSize[Level-1][0];Row++){
                for (int Colnum=1;Colnum<=TabSize[Level-1][1];Colnum++){
                    if (buttons[Row-1][Colnum-1].getText().toString().equals(String.valueOf(Word[0]))){
                        //Log.d("PathFinder",String.valueOf(Row)+","+String.valueOf(Colnum));
                        int Condition=0;
                        for (int Neighbor=1;Neighbor<=8;Neighbor++){
                            //Log.d("PathFinder","Neighbor:"+String.valueOf(Neighbor));
                            if (Neighbor==1){
                                //Row-- && Column--
                                int CorrectLetter=0;
                                int RootRow=Row;
                                int RootColumn=Colnum;
                                int NewRow;
                                int NewColumn;
                                for (int letter=1;letter<=Word.length-1;letter++){
                                    NewRow=RootRow-2;
                                    NewColumn=RootColumn-2;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level-1][0]-1 && NewColumn >= 0 && NewColumn <= TabSize[Level-1][1]-1 && buttons[NewRow][NewColumn].getText().toString().equals(String.valueOf(Word[letter]))){
                                           CorrectLetter++;
                                           RootRow=NewRow+1;
                                           RootColumn=NewColumn+1;
                                    }
                                    //Log.d("PathFinder","CorrectLetter:"+String.valueOf(CorrectLetter));
                                    if (CorrectLetter==Word.length-1){
                                        CorrectWord++;
                                        Condition=1;
                                        Log.d("PathFinder","Word '"+String.valueOf(CTabWord)+"' Found");
                                        break;
                                    }
                                }
                            }
                            if (Neighbor==2){
                                //Row--
                                int CorrectLetter=0;
                                int RootRow=Row;
                                //int RootColumn=Colnum;
                                int NewRow;
                                //int NewColumn;
                                for (int letter=1;letter<=Word.length-1;letter++){
                                    NewRow=RootRow-2;
                                    //NewColumn=RootColumn-2;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level-1][0]-1  && buttons[NewRow][Colnum-1].getText().toString().equals(String.valueOf(Word[letter]))){
                                        CorrectLetter++;
                                        RootRow=NewRow+1;
                                        //RootColumn=NewColumn+1;
                                    }
                                    //Log.d("PathFinder","CorrectLetter:"+String.valueOf(CorrectLetter));
                                    if (CorrectLetter==Word.length-1){
                                        CorrectWord++;
                                        Condition=2;
                                        Log.d("PathFinder","Word '"+String.valueOf(CTabWord)+"' Found");
                                        break;
                                    }
                                }
                            }
                            if (Neighbor==3){
                                //Row-- && Column++
                                int CorrectLetter=0;
                                int RootRow=Row;
                                int RootColumn=Colnum;
                                int NewRow;
                                int NewColumn;
                                for (int letter=1;letter<=Word.length-1;letter++){
                                    NewRow=RootRow-2;
                                    NewColumn=RootColumn;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level-1][0]-1 && NewColumn >= 0 && NewColumn <= TabSize[Level-1][1]-1 && buttons[NewRow][NewColumn].getText().toString().equals(String.valueOf(Word[letter]))){
                                        CorrectLetter++;
                                        RootRow=NewRow+1;
                                        RootColumn=NewColumn+1;
                                    }
                                    //Log.d("PathFinder","CorrectLetter:"+String.valueOf(CorrectLetter));
                                    if (CorrectLetter==Word.length-1){
                                        CorrectWord++;
                                        Condition=3;
                                        Log.d("PathFinder","Word '"+String.valueOf(CTabWord)+"' Found");
                                        break;
                                    }
                                }
                            }
                            if (Neighbor==4){
                                //Column--
                                int CorrectLetter=0;
                                //int RootRow=Row;
                                int RootColumn=Colnum;
                                //int NewRow;
                                int NewColumn;
                                for (int letter=1;letter<=Word.length-1;letter++){
                                    //NewRow=RootRow-2;
                                    NewColumn=RootColumn-2;
                                    if (NewColumn >= 0 && NewColumn <= TabSize[Level-1][1]-1  && buttons[Row-1][NewColumn].getText().toString().equals(String.valueOf(Word[letter]))){
                                        CorrectLetter++;
                                        //RootRow=NewRow+1;
                                        RootColumn=NewColumn+1;
                                    }
                                    //Log.d("PathFinder","CorrectLetter:"+String.valueOf(CorrectLetter));
                                    if (CorrectLetter==Word.length-1){
                                        CorrectWord++;
                                        Condition=4;
                                        Log.d("PathFinder","Word '"+String.valueOf(CTabWord)+"' Found");
                                        break;
                                    }
                                }
                            }
                            if (Neighbor==5){
                                //Column++
                                int CorrectLetter=0;
                                //int RootRow=Row;
                                int RootColumn=Colnum;
                                //int NewRow;
                                int NewColumn;
                                for (int letter=1;letter<=Word.length-1;letter++){
                                    //NewRow=RootRow-2;
                                    NewColumn=RootColumn;
                                    if (NewColumn >= 0 && NewColumn <= TabSize[Level-1][1]-1  && buttons[Row-1][NewColumn].getText().toString().equals(String.valueOf(Word[letter]))){
                                        CorrectLetter++;
                                        //RootRow=NewRow+1;
                                        RootColumn=NewColumn+1;
                                    }
                                    //Log.d("PathFinder","CorrectLetter:"+String.valueOf(CorrectLetter));
                                    if (CorrectLetter==Word.length-1){
                                        CorrectWord++;
                                        Condition=5;
                                        Log.d("PathFinder","Word '"+String.valueOf(CTabWord)+"' Found");
                                        break;
                                    }
                                }
                            }
                            if (Neighbor==6){
                                //Row++ && Column--
                                int CorrectLetter=0;
                                int RootRow=Row;
                                int RootColumn=Colnum;
                                int NewRow;
                                int NewColumn;
                                for (int letter=1;letter<=Word.length-1;letter++){
                                    NewRow=RootRow;
                                    NewColumn=RootColumn-2;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level-1][0]-1 && NewColumn >= 0 && NewColumn <= TabSize[Level-1][1]-1 && buttons[NewRow][NewColumn].getText().toString().equals(String.valueOf(Word[letter]))){
                                        CorrectLetter++;
                                        RootRow=NewRow+1;
                                        RootColumn=NewColumn+1;
                                    }
                                    //Log.d("PathFinder","CorrectLetter:"+String.valueOf(CorrectLetter));
                                    if (CorrectLetter==Word.length-1){
                                        CorrectWord++;
                                        Condition=6;
                                        Log.d("PathFinder","Word '"+String.valueOf(CTabWord)+"' Found");
                                        break;
                                    }
                                }
                            }
                            if (Neighbor==7){
                                //Row++
                                int CorrectLetter=0;
                                int RootRow=Row;
                                //int RootColumn=Colnum;
                                int NewRow;
                                //int NewColumn;
                                for (int letter=1;letter<=Word.length-1;letter++){
                                    NewRow=RootRow;
                                    //NewColumn=RootColumn-2;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level-1][0]-1  && buttons[NewRow][Colnum-1].getText().toString().equals(String.valueOf(Word[letter]))){
                                        CorrectLetter++;
                                        RootRow=NewRow+1;
                                        //RootColumn=NewColumn+1;
                                    }
                                    //Log.d("PathFinder","CorrectLetter:"+String.valueOf(CorrectLetter));
                                    if (CorrectLetter==Word.length-1){
                                        CorrectWord++;
                                        Condition=7;
                                        Log.d("PathFinder","Word '"+String.valueOf(CTabWord)+"' Found");
                                        break;
                                    }
                                }
                            }
                            if (Neighbor==8){
                                //Row++ && Column++
                                int CorrectLetter=0;
                                int RootRow=Row;
                                int RootColumn=Colnum;
                                int NewRow;
                                int NewColumn;
                                for (int letter=1;letter<=Word.length-1;letter++){
                                    NewRow=RootRow;
                                    NewColumn=RootColumn;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level-1][0]-1 && NewColumn >= 0 && NewColumn <= TabSize[Level-1][1]-1 && buttons[NewRow][NewColumn].getText().toString().equals(String.valueOf(Word[letter]))){
                                        CorrectLetter++;
                                        RootRow=NewRow+1;
                                        RootColumn=NewColumn+1;
                                    }
                                    //Log.d("PathFinder","CorrectLetter:"+String.valueOf(CorrectLetter));
                                    if (CorrectLetter==Word.length-1){
                                        CorrectWord++;
                                        Condition=8;
                                        Log.d("PathFinder","Word '"+String.valueOf(CTabWord)+"' Found");
                                        break;
                                    }
                                }
                            }
                        }

                        if (DebugMode) {
                            if (Condition == 1) {
                                //Row-- && Column--
                                int NewRow = Row - 1;
                                int NewColumn = Colnum - 1;
                                if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1 && NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                    if (buttons[NewRow][NewColumn].getTag().equals("NotChoosen"))
                                        onClick(buttons[NewRow][NewColumn]);
                                }
                                for (int Bt = 1; Bt <= Word.length - 1; Bt++) {
                                    NewRow--;
                                    NewColumn--;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1 && NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                        if (buttons[NewRow][NewColumn].getTag().equals("NotChoosen"))
                                            onClick(buttons[NewRow][NewColumn]);
                                    }
                                }
                            }
                            if (Condition == 2) {
                                //Row--
                                int NewRow = Row - 1;
                                //int NewColumn=Colnum-1;
                                if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1) {
                                    if (buttons[NewRow][Colnum - 1].getTag().equals("NotChoosen"))
                                        onClick(buttons[NewRow][Colnum - 1]);
                                }
                                for (int Bt = 1; Bt <= Word.length - 1; Bt++) {
                                    NewRow--;
                                    //NewColumn--;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1) {
                                        if (buttons[NewRow][Colnum - 1].getTag().equals("NotChoosen"))
                                            onClick(buttons[NewRow][Colnum - 1]);
                                    }
                                }
                            }
                            if (Condition == 3) {
                                //Row-- && Column++
                                int NewRow = Row - 1;
                                int NewColumn = Colnum - 1;
                                if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1 && NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                    if (buttons[NewRow][NewColumn].getTag().equals("NotChoosen"))
                                        onClick(buttons[NewRow][NewColumn]);
                                }
                                for (int Bt = 1; Bt <= Word.length - 1; Bt++) {
                                    NewRow--;
                                    NewColumn++;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1 && NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                        if (buttons[NewRow][NewColumn].getTag().equals("NotChoosen"))
                                            onClick(buttons[NewRow][NewColumn]);
                                    }
                                }
                            }
                            if (Condition == 4) {
                                //Column--
                                //int NewRow=Row-1;
                                int NewColumn = Colnum - 1;
                                if (NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                    if (buttons[Row - 1][NewColumn].getTag().equals("NotChoosen")) {
                                        onClick(buttons[Row - 1][NewColumn]);
                                    }
                                }
                                for (int Bt = 1; Bt <= Word.length - 1; Bt++) {
                                    //NewRow--;
                                    NewColumn--;
                                    if (NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                        if (buttons[Row - 1][NewColumn].getTag().equals("NotChoosen")) {
                                            onClick(buttons[Row - 1][NewColumn]);
                                            Log.d("PathFinder", "Doing:" + String.valueOf(Row) + String.valueOf(NewColumn + 1));
                                        }

                                    }
                                }
                            }
                            if (Condition == 5) {
                                //Column++
                                //int NewRow=Row-1;
                                int NewColumn = Colnum - 1;
                                if (NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                    if (buttons[Row - 1][NewColumn].getTag().equals("NotChoosen"))
                                        onClick(buttons[Row - 1][NewColumn]);
                                }
                                for (int Bt = 1; Bt <= Word.length - 1; Bt++) {
                                    //NewRow--;
                                    NewColumn++;
                                    if (NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                        if (buttons[Row - 1][NewColumn].getTag().equals("NotChoosen"))
                                            onClick(buttons[Row - 1][NewColumn]);
                                    }
                                }
                            }
                            if (Condition == 6) {
                                //Row++ && Column--
                                int NewRow = Row - 1;
                                int NewColumn = Colnum - 1;
                                if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1 && NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                    if (buttons[NewRow][NewColumn].getTag().equals("NotChoosen"))
                                        onClick(buttons[NewRow][NewColumn]);
                                }
                                for (int Bt = 1; Bt <= Word.length - 1; Bt++) {
                                    NewRow++;
                                    NewColumn--;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1 && NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                        if (buttons[NewRow][NewColumn].getTag().equals("NotChoosen"))
                                            onClick(buttons[NewRow][NewColumn]);
                                    }
                                }
                            }
                            if (Condition == 7) {
                                int NewRow = Row - 1;
                                if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1) {
                                    if (buttons[NewRow][Colnum - 1].getTag().equals("NotChoosen"))
                                        onClick(buttons[NewRow][Colnum - 1]);
                                }
                                for (int Bt = 1; Bt <= Word.length - 1; Bt++) {
                                    NewRow++;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1) {
                                        if (buttons[NewRow][Colnum - 1].getTag().equals("NotChoosen"))
                                            onClick(buttons[NewRow][Colnum - 1]);
                                    }
                                }
                            }
                            if (Condition == 8) {
                                //Row++ && Column++
                                int NewRow = Row - 1;
                                int NewColumn = Colnum - 1;
                                if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1 && NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                    if (buttons[NewRow][NewColumn].getTag().equals("NotChoosen"))
                                        onClick(buttons[NewRow][NewColumn]);
                                }
                                for (int Bt = 1; Bt <= Word.length - 1; Bt++) {
                                    NewRow++;
                                    NewColumn++;
                                    if (NewRow >= 0 && NewRow <= TabSize[Level - 1][0] - 1 && NewColumn >= 0 && NewColumn <= TabSize[Level - 1][1] - 1) {
                                        if (buttons[NewRow][NewColumn].getTag().equals("NotChoosen"))
                                            onClick(buttons[NewRow][NewColumn]);
                                    }
                                }
                            }
                        }


                    }
                }
            }


        }

        if (CorrectWord==TabWords[Level-1].length) Log.d("PathFinder","Table Has NoProblem");
        else Log.d("PathFinder","Table Has Some Problems");
    }



    void InAppPurchase(){
        final SweetAlertDialog Pbuilder=new SweetAlertDialog(MainActivity.this,SweetAlertDialog.NORMAL_TYPE);
        Pbuilder.setTitle("رد کردن مرحله "+String.valueOf(Level));
        Pbuilder.setContentText("با پرداخت 1000 تومان از این مرحله عبور کنید.");
        Pbuilder.setCancelable(false);
        Pbuilder.setConfirmButton("باشه", new SweetAlertDialog.OnSweetClickListener() {
            @Override
            public void onClick(SweetAlertDialog sweetAlertDialog) {
                Pbuilder.dismiss();
                MainActivity mainActivity = new MainActivity();
                if (mainActivity.IsNetwork(MainActivity.this)) {

                    if (BazarInstalation) {
                        RequestCode = RequestCode + 1;
                        iabHelper.launchPurchaseFlow(MainActivity.this, "Skip", RequestCode, PurchaseListener);
                        PurchaseWaitSAD=new SweetAlertDialog(MainActivity.this,SweetAlertDialog.PROGRESS_TYPE);
                        PurchaseWaitSAD.show();
                    } else {
                        NoBazaar();
                    }

                } else {
                    NoInternet();
                }
            }
        });
        Pbuilder.setCancelButton("نمیخوام", new SweetAlertDialog.OnSweetClickListener() {
            @Override
            public void onClick(SweetAlertDialog sweetAlertDialog) {
                HasPurchaed=false;
                Pbuilder.dismiss();
            }
        });
        Pbuilder.show();

    }
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        //Log.d(TAG, "onActivityResult(" + requestCode + "," + resultCode + "," + data);

        // Pass on the activity result to the helper for handling
        if (!iabHelper.handleActivityResult(requestCode, resultCode, data)) {
            super.onActivityResult(requestCode, resultCode, data);
        } else {
            //Log.d(TAG, "onActivityResult handled by IABUtil.");
        }
    }
    @Override
    public void onDestroy() {
        super.onDestroy();
        if (iabHelper != null) iabHelper.dispose();
        iabHelper = null;
    }
    void PurchaseFailed(){
        Log.d("Purchase","SkipFailed");

        HasPurchaed=false;
        Snackbar snackbar=Snackbar.make(findViewById(R.id.ConstraintLayoutMain),"خرید شما ناموفق بود",Snackbar.LENGTH_LONG).setAction("تلاش دوباره", new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                RequestCode=RequestCode+1;
                iabHelper.launchPurchaseFlow(MainActivity.this,"Skip",RequestCode,PurchaseListener,"Retry");
                PurchaseWaitSAD.show();
            }
        });
        TextView textView=(TextView)snackbar.getView().findViewById(com.google.android.material.R.id.snackbar_text);
        TextView textView2=(TextView)snackbar.getView().findViewById(com.google.android.material.R.id.snackbar_action);
        textView.setTypeface(typefaceMitra);
        textView2.setTypeface(typefaceTitr);
        snackbar.show();
    }
    void NoInternet(){
        Log.d("Purchase","SkipFailed");
        HasPurchaed=false;
        Snackbar snackbar=Snackbar.make(findViewById(R.id.ConstraintLayoutMain),"اتصالات اینترنت خود را بررسی کنید",Snackbar.LENGTH_LONG);
        Typeface typefaceTitr = Typeface.createFromAsset(getAssets(), "fonts/IRTitr.ttf");
        Typeface typefaceMitra=Typeface.createFromAsset(getAssets(),"fonts/IRMitra.ttf");
        TextView textView=(TextView)snackbar.getView().findViewById(com.google.android.material.R.id.snackbar_text);
        TextView textView2=(TextView)snackbar.getView().findViewById(com.google.android.material.R.id.snackbar_action);
        textView.setTypeface(typefaceMitra);
        textView2.setTypeface(typefaceTitr);
        snackbar.show();
    }
    void NoBazaar(){
        Log.d("Purchase:", "SetupFailure");
        final SweetAlertDialog sweetAlertDialog2 = new SweetAlertDialog(MainActivity.this, SweetAlertDialog.ERROR_TYPE);
        sweetAlertDialog2.setTitle("نیاز به اپلیکیشن کافه بازار");
        sweetAlertDialog2.setCancelable(false);
        sweetAlertDialog2.setContentText("برای خرید درون برنامه ای نیاز به اپلیکیشن کافه بازار است" + "\n" + "لطفا به دانلود کافه بازار از طریق دکمه زیر اقدام کنید");
        sweetAlertDialog2.setConfirmButton("نصب", new SweetAlertDialog.OnSweetClickListener() {
            @Override
            public void onClick(SweetAlertDialog sweetAlertDialog) {
                Intent intent = new Intent(Intent.ACTION_VIEW);
                intent.setData(Uri.parse("https://www.cafebazaar.ir/install"));
                startActivity(intent);
            }
        });
        sweetAlertDialog2.setCancelButton("بعدا", new SweetAlertDialog.OnSweetClickListener() {
            @Override
            public void onClick(SweetAlertDialog sweetAlertDialog) {
                sweetAlertDialog2.dismiss();
            }
        });
        sweetAlertDialog2.show();
    }

    IabHelper.OnIabPurchaseFinishedListener  PurchaseListener= new IabHelper.OnIabPurchaseFinishedListener() {
        @Override
        public void onIabPurchaseFinished(IabResult result, Purchase info) {
            PurchaseWaitSAD.dismiss();
            if (result.isSuccess()){
                Log.d("Purchase","TotalSuccess");
                iabHelper.consumeAsync(info,onConsumeFinishedListener);
                HasPurchaed=true;
                sEditor.putString("Level",String.valueOf(Level+1));
                sEditor.apply();
                SweetAlertDialog sweetAlertDialog=new SweetAlertDialog(MainActivity.this,SweetAlertDialog.SUCCESS_TYPE);
                sweetAlertDialog.setTitle("ممنون از اعتمادتان");
                sweetAlertDialog.setContentText("خرید شما موفقیت آمیز بود.");
                sweetAlertDialog.setConfirmButton("باشه", new SweetAlertDialog.OnSweetClickListener() {
                    @Override
                    public void onClick(SweetAlertDialog sweetAlertDialog) {
                        sweetAlertDialog.dismiss();
                        finish();
                    }
                });
                sweetAlertDialog.show();
            }else{
                PurchaseFailed();
            }
        }
    };
    IabHelper.OnConsumeFinishedListener onConsumeFinishedListener=new IabHelper.OnConsumeFinishedListener() {
        @Override
        public void onConsumeFinished(Purchase purchase, IabResult result) {
            if (result.isSuccess()){
                Toast.makeText(MainActivity.this,"Consume:Success",Toast.LENGTH_LONG);
            }

        }
    };

}
